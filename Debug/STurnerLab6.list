
STurnerLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000668c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  08006838  08006838  00007838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a90  08007a90  000091b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007a90  08007a90  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a98  08007a98  000091b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a98  08007a98  00008a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a9c  08007a9c  00008a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08007aa0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091b4  2**0
                  CONTENTS
 10 .bss          00025bf4  200001b4  200001b4  000091b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025da8  20025da8  000091b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef79  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d32  00000000  00000000  0001815d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  0001ae90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9c  00000000  00000000  0001bde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026862  00000000  00000000  0001c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fb9  00000000  00000000  000431de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfdd6  00000000  00000000  00057197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136f6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004684  00000000  00000000  00136fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0013b634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001b4 	.word	0x200001b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006820 	.word	0x08006820

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001b8 	.word	0x200001b8
 80001e8:	08006820 	.word	0x08006820

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	db0b      	blt.n	8000516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	f003 021f 	and.w	r2, r3, #31
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <__NVIC_EnableIRQ+0x38>)
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	095b      	lsrs	r3, r3, #5
 800050c:	2001      	movs	r0, #1
 800050e:	fa00 f202 	lsl.w	r2, r0, r2
 8000512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000e100 	.word	0xe000e100

08000528 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	2b00      	cmp	r3, #0
 8000538:	db12      	blt.n	8000560 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f003 021f 	and.w	r2, r3, #31
 8000540:	490a      	ldr	r1, [pc, #40]	@ (800056c <__NVIC_DisableIRQ+0x44>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	2001      	movs	r0, #1
 800054a:	fa00 f202 	lsl.w	r2, r0, r2
 800054e:	3320      	adds	r3, #32
 8000550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000e100 	.word	0xe000e100

08000570 <buttonInterruptInit>:
	ButtonInit();
}
#endif

#if USE_INTERRUPT_FOR_BUTTON == 1
void buttonInterruptInit(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	ButtonInterrupt();
 8000574:	f000 f85a 	bl	800062c <ButtonInterrupt>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <EXTI0_IRQHandler>:
			destinationArr[j] = nameArr[j];
		}
	}
}

void EXTI0_IRQHandler(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	NVIC_DisableIRQ(EXTI0_IRQn);
 8000580:	2006      	movs	r0, #6
 8000582:	f7ff ffd1 	bl	8000528 <__NVIC_DisableIRQ>
	addSchedulerEvent(ROTATION_EVENT);
 8000586:	2010      	movs	r0, #16
 8000588:	f000 fbc0 	bl	8000d0c <addSchedulerEvent>

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800058c:	4b03      	ldr	r3, [pc, #12]	@ (800059c <EXTI0_IRQHandler+0x20>)
 800058e:	2201      	movs	r2, #1
 8000590:	615a      	str	r2, [r3, #20]
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000592:	2006      	movs	r0, #6
 8000594:	f7ff ffaa 	bl	80004ec <__NVIC_EnableIRQ>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013c00 	.word	0x40013c00

080005a0 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005a4:	f005 fdfc 	bl	80061a0 <initialise_monitor_handles>
	initializeRNG();
 80005a8:	f000 f81c 	bl	80005e4 <initializeRNG>
	buttonInterruptInit();
 80005ac:	f7ff ffe0 	bl	8000570 <buttonInterruptInit>
	LTCD__Init();
 80005b0:	f000 f982 	bl	80008b8 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 f93f 	bl	8000838 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fa72 	bl	8000aa8 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005c4:	f000 fb48 	bl	8000c58 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005c8:	4b02      	ldr	r3, [pc, #8]	@ (80005d4 <ApplicationInit+0x34>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200001d0 	.word	0x200001d0

080005d8 <LCD_Main_Menu>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void LCD_Main_Menu(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

	mainMenu();
 80005dc:	f000 ff6a 	bl	80014b4 <mainMenu>

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <initializeRNG>:
			printf("Not Pressed\n\n");
			LCD_Clear(0, LCD_COLOR_GREEN);
		}
	}
}
void initializeRNG(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	RNG_Init();
 80005e8:	f000 fb4e 	bl	8000c88 <RNG_Init>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <__NVIC_EnableIRQ>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db0b      	blt.n	800061a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 021f 	and.w	r2, r3, #31
 8000608:	4907      	ldr	r1, [pc, #28]	@ (8000628 <__NVIC_EnableIRQ+0x38>)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	095b      	lsrs	r3, r3, #5
 8000610:	2001      	movs	r0, #1
 8000612:	fa00 f202 	lsl.w	r2, r0, r2
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e100 	.word	0xe000e100

0800062c <ButtonInterrupt>:
	else{
		return false;
	}
}

void ButtonInterrupt(){
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonInterrupt = {0};
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
	buttonInterrupt.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000642:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000646:	613b      	str	r3, [r7, #16]
	buttonInterrupt.Pin = GPIO_PIN_0;
 8000648:	2301      	movs	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <ButtonInterrupt+0x74>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <ButtonInterrupt+0x74>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6313      	str	r3, [r2, #48]	@ 0x30
 800065c:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <ButtonInterrupt+0x74>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <ButtonInterrupt+0x74>)
 800066e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000670:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <ButtonInterrupt+0x74>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6453      	str	r3, [r2, #68]	@ 0x44
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <ButtonInterrupt+0x74>)
 800067a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &buttonInterrupt);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <ButtonInterrupt+0x78>)
 800068c:	f002 fc3e 	bl	8002f0c <HAL_GPIO_Init>
	__NVIC_EnableIRQ(EXTI0_IRQn);
 8000690:	2006      	movs	r0, #6
 8000692:	f7ff ffad 	bl	80005f0 <__NVIC_EnableIRQ>
}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	@ 0x30
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4b5a      	ldr	r3, [pc, #360]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b6:	4a59      	ldr	r2, [pc, #356]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006be:	4b57      	ldr	r3, [pc, #348]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b53      	ldr	r3, [pc, #332]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a52      	ldr	r2, [pc, #328]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b50      	ldr	r3, [pc, #320]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b4c      	ldr	r3, [pc, #304]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a4b      	ldr	r2, [pc, #300]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b49      	ldr	r3, [pc, #292]	@ (800081c <LCD_GPIO_Init+0x174>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b45      	ldr	r3, [pc, #276]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a44      	ldr	r2, [pc, #272]	@ (800081c <LCD_GPIO_Init+0x174>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b42      	ldr	r3, [pc, #264]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a3d      	ldr	r2, [pc, #244]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a36      	ldr	r2, [pc, #216]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b34      	ldr	r3, [pc, #208]	@ (800081c <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b30      	ldr	r3, [pc, #192]	@ (800081c <LCD_GPIO_Init+0x174>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a2f      	ldr	r2, [pc, #188]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <LCD_GPIO_Init+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000772:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000776:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000784:	230e      	movs	r3, #14
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4824      	ldr	r0, [pc, #144]	@ (8000820 <LCD_GPIO_Init+0x178>)
 8000790:	f002 fbbc 	bl	8002f0c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000794:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000798:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4820      	ldr	r0, [pc, #128]	@ (8000824 <LCD_GPIO_Init+0x17c>)
 80007a2:	f002 fbb3 	bl	8002f0c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80007a6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007ac:	f107 031c 	add.w	r3, r7, #28
 80007b0:	4619      	mov	r1, r3
 80007b2:	481d      	ldr	r0, [pc, #116]	@ (8000828 <LCD_GPIO_Init+0x180>)
 80007b4:	f002 fbaa 	bl	8002f0c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80007b8:	2348      	movs	r3, #72	@ 0x48
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	481a      	ldr	r0, [pc, #104]	@ (800082c <LCD_GPIO_Init+0x184>)
 80007c4:	f002 fba2 	bl	8002f0c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4816      	ldr	r0, [pc, #88]	@ (8000830 <LCD_GPIO_Init+0x188>)
 80007d6:	f002 fb99 	bl	8002f0c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007da:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007de:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <LCD_GPIO_Init+0x18c>)
 80007e8:	f002 fb90 	bl	8002f0c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007f0:	2309      	movs	r3, #9
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	480a      	ldr	r0, [pc, #40]	@ (8000824 <LCD_GPIO_Init+0x17c>)
 80007fc:	f002 fb86 	bl	8002f0c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <LCD_GPIO_Init+0x18c>)
 800080e:	f002 fb7d 	bl	8002f0c <HAL_GPIO_Init>
}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	@ 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40021400 	.word	0x40021400
 8000834:	40021800 	.word	0x40021800

08000838 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	@ 0x40
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000846:	23f0      	movs	r3, #240	@ 0xf0
 8000848:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800084e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000852:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000858:	23ff      	movs	r3, #255	@ 0xff
 800085a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <LTCD_Layer_Init+0x78>)
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000874:	23f0      	movs	r3, #240	@ 0xf0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000878:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <LTCD_Layer_Init+0x7c>)
 800089a:	f003 fefd 	bl	8004698 <HAL_LTDC_ConfigLayer>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80008a4:	f000 f9d2 	bl	8000c4c <LCD_Error_Handler>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3740      	adds	r7, #64	@ 0x40
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002b4 	.word	0x200002b4
 80008b4:	200001d8 	.word	0x200001d8

080008b8 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80008bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <LTCD__Init+0xb0>)
 80008be:	4a2b      	ldr	r2, [pc, #172]	@ (800096c <LTCD__Init+0xb4>)
 80008c0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008c2:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <LTCD__Init+0xb0>)
 80008c4:	2209      	movs	r2, #9
 80008c6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <LTCD__Init+0xb0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008ce:	4b26      	ldr	r3, [pc, #152]	@ (8000968 <LTCD__Init+0xb0>)
 80008d0:	221d      	movs	r2, #29
 80008d2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <LTCD__Init+0xb0>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008da:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <LTCD__Init+0xb0>)
 80008dc:	f240 120d 	movw	r2, #269	@ 0x10d
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <LTCD__Init+0xb0>)
 80008e4:	f240 1243 	movw	r2, #323	@ 0x143
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <LTCD__Init+0xb0>)
 80008ec:	f240 1217 	movw	r2, #279	@ 0x117
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <LTCD__Init+0xb0>)
 80008f4:	f240 1247 	movw	r2, #327	@ 0x147
 80008f8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <LTCD__Init+0xb0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <LTCD__Init+0xb0>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <LTCD__Init+0xb0>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <LTCD__Init+0xb8>)
 8000914:	2208      	movs	r2, #8
 8000916:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000918:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <LTCD__Init+0xb8>)
 800091a:	22c0      	movs	r2, #192	@ 0xc0
 800091c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <LTCD__Init+0xb8>)
 8000920:	2204      	movs	r2, #4
 8000922:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <LTCD__Init+0xb8>)
 8000926:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800092a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800092c:	4810      	ldr	r0, [pc, #64]	@ (8000970 <LTCD__Init+0xb8>)
 800092e:	f004 fd0d 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000932:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <LTCD__Init+0xb0>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000938:	4b0b      	ldr	r3, [pc, #44]	@ (8000968 <LTCD__Init+0xb0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <LTCD__Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <LTCD__Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800094a:	f7ff fead 	bl	80006a8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <LTCD__Init+0xb0>)
 8000950:	f003 fdd2 	bl	80044f8 <HAL_LTDC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800095a:	f000 f977 	bl	8000c4c <LCD_Error_Handler>
	 }

	ili9341_Init();
 800095e:	f001 f843 	bl	80019e8 <ili9341_Init>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001d8 	.word	0x200001d8
 800096c:	40016800 	.word	0x40016800
 8000970:	20000280 	.word	0x20000280

08000974 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
 800097e:	460b      	mov	r3, r1
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000986:	88ba      	ldrh	r2, [r7, #4]
 8000988:	4613      	mov	r3, r2
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	461a      	mov	r2, r3
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	4413      	add	r3, r2
 8000996:	4905      	ldr	r1, [pc, #20]	@ (80009ac <LCD_Draw_Pixel+0x38>)
 8000998:	887a      	ldrh	r2, [r7, #2]
 800099a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200002b4 	.word	0x200002b4

080009b0 <LCD_Draw_Square_Fill>:
            }
        }
    }
}

void LCD_Draw_Square_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]

	for(uint16_t y = y1; y <= y2; y++){
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	81fb      	strh	r3, [r7, #14]
 80009d2:	e012      	b.n	80009fa <LCD_Draw_Square_Fill+0x4a>

		for(uint16_t x = x1; x <= x2; x++){
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	81bb      	strh	r3, [r7, #12]
 80009d8:	e008      	b.n	80009ec <LCD_Draw_Square_Fill+0x3c>

			LCD_Draw_Pixel(x, y, color);
 80009da:	8c3a      	ldrh	r2, [r7, #32]
 80009dc:	89f9      	ldrh	r1, [r7, #14]
 80009de:	89bb      	ldrh	r3, [r7, #12]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffc7 	bl	8000974 <LCD_Draw_Pixel>
		for(uint16_t x = x1; x <= x2; x++){
 80009e6:	89bb      	ldrh	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	81bb      	strh	r3, [r7, #12]
 80009ec:	89ba      	ldrh	r2, [r7, #12]
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d9f2      	bls.n	80009da <LCD_Draw_Square_Fill+0x2a>
	for(uint16_t y = y1; y <= y2; y++){
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	3301      	adds	r3, #1
 80009f8:	81fb      	strh	r3, [r7, #14]
 80009fa:	89fa      	ldrh	r2, [r7, #14]
 80009fc:	883b      	ldrh	r3, [r7, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d9e8      	bls.n	80009d4 <LCD_Draw_Square_Fill+0x24>
		}
	}
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4604      	mov	r4, r0
 8000a14:	4608      	mov	r0, r1
 8000a16:	4611      	mov	r1, r2
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4623      	mov	r3, r4
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	807b      	strh	r3, [r7, #2]
 8000a26:	4613      	mov	r3, r2
 8000a28:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	81fb      	strh	r3, [r7, #14]
 8000a2e:	e00b      	b.n	8000a48 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a30:	89fa      	ldrh	r2, [r7, #14]
 8000a32:	88bb      	ldrh	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	b299      	uxth	r1, r3
 8000a38:	883a      	ldrh	r2, [r7, #0]
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff99 	bl	8000974 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	3301      	adds	r3, #1
 8000a46:	81fb      	strh	r3, [r7, #14]
 8000a48:	89fa      	ldrh	r2, [r7, #14]
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d3ef      	bcc.n	8000a30 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd90      	pop	{r4, r7, pc}

08000a5a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8000a5a:	b590      	push	{r4, r7, lr}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4604      	mov	r4, r0
 8000a62:	4608      	mov	r0, r1
 8000a64:	4611      	mov	r1, r2
 8000a66:	461a      	mov	r2, r3
 8000a68:	4623      	mov	r3, r4
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	80bb      	strh	r3, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
 8000a74:	4613      	mov	r3, r2
 8000a76:	803b      	strh	r3, [r7, #0]

	for (uint16_t i = 0; i < len; i++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	81fb      	strh	r3, [r7, #14]
 8000a7c:	e00b      	b.n	8000a96 <LCD_Draw_Horizontal_Line+0x3c>
	  {
		  LCD_Draw_Pixel(i + x, y, color);
 8000a7e:	89fa      	ldrh	r2, [r7, #14]
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4413      	add	r3, r2
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	883a      	ldrh	r2, [r7, #0]
 8000a88:	88b9      	ldrh	r1, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff72 	bl	8000974 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 8000a90:	89fb      	ldrh	r3, [r7, #14]
 8000a92:	3301      	adds	r3, #1
 8000a94:	81fb      	strh	r3, [r7, #14]
 8000a96:	89fa      	ldrh	r2, [r7, #14]
 8000a98:	887b      	ldrh	r3, [r7, #2]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ef      	bcc.n	8000a7e <LCD_Draw_Horizontal_Line+0x24>
	  }
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <LCD_Clear>:
void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10e      	bne.n	8000adc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	e007      	b.n	8000ad4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ac4:	4908      	ldr	r1, [pc, #32]	@ (8000ae8 <LCD_Clear+0x40>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	88ba      	ldrh	r2, [r7, #4]
 8000aca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ada:	d3f3      	bcc.n	8000ac4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	200002b4 	.word	0x200002b4

08000aec <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <LCD_SetTextColor+0x1c>)
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	8013      	strh	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b14:	4a04      	ldr	r2, [pc, #16]	@ (8000b28 <LCD_SetFont+0x1c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200002b0 	.word	0x200002b0

08000b2c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	603a      	str	r2, [r7, #0]
 8000b36:	80fb      	strh	r3, [r7, #6]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e04c      	b.n	8000be4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	e03f      	b.n	8000bd0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <LCD_Draw_Char+0xd0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	4a27      	ldr	r2, [pc, #156]	@ (8000c00 <LCD_Draw_Char+0xd4>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	409a      	lsls	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	fa42 f303 	asr.w	r3, r2, r3
 8000b78:	400b      	ands	r3, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d104      	bne.n	8000b88 <LCD_Draw_Char+0x5c>
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <LCD_Draw_Char+0xd0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	889b      	ldrh	r3, [r3, #4]
 8000b84:	2b0c      	cmp	r3, #12
 8000b86:	d920      	bls.n	8000bca <LCD_Draw_Char+0x9e>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	fa42 f303 	asr.w	r3, r2, r3
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d104      	bne.n	8000bac <LCD_Draw_Char+0x80>
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <LCD_Draw_Char+0xd0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	889b      	ldrh	r3, [r3, #4]
 8000ba8:	2b0c      	cmp	r3, #12
 8000baa:	d80e      	bhi.n	8000bca <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b298      	uxth	r0, r3
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <LCD_Draw_Char+0xd8>)
 8000bc2:	8812      	ldrh	r2, [r2, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff fed5 	bl	8000974 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <LCD_Draw_Char+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	889b      	ldrh	r3, [r3, #4]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d3b8      	bcc.n	8000b50 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <LCD_Draw_Char+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	88db      	ldrh	r3, [r3, #6]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d3ab      	bcc.n	8000b4a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200002b0 	.word	0x200002b0
 8000c00:	aaaaaaab 	.word	0xaaaaaaab
 8000c04:	20000000 	.word	0x20000000

08000c08 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
 8000c12:	460b      	mov	r3, r1
 8000c14:	80bb      	strh	r3, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c1a:	78fb      	ldrb	r3, [r7, #3]
 8000c1c:	3b20      	subs	r3, #32
 8000c1e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <LCD_DisplayChar+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <LCD_DisplayChar+0x40>)
 8000c2a:	6809      	ldr	r1, [r1, #0]
 8000c2c:	88c9      	ldrh	r1, [r1, #6]
 8000c2e:	fb01 f303 	mul.w	r3, r1, r3
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	441a      	add	r2, r3
 8000c36:	88b9      	ldrh	r1, [r7, #4]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff76 	bl	8000b2c <LCD_Draw_Char>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200002b0 	.word	0x200002b0

08000c4c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <LCD_Error_Handler+0x8>

08000c58 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c5c:	f001 fc55 	bl	800250a <STMPE811_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d001      	beq.n	8000c6a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c66:	bf00      	nop
 8000c68:	e7fd      	b.n	8000c66 <InitializeLCDTouch+0xe>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f001 fcff 	bl	800267a <STMPE811_ReadTouch>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <RNG_Init>:
#include "RNG_Handler.h"

static RNG_HandleTypeDef random;
HAL_StatusTypeDef statusRNG = HAL_OK;

void RNG_Init(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

	__HAL_RCC_RNG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <RNG_Init+0x44>)
 8000c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c96:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <RNG_Init+0x44>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <RNG_Init+0x44>)
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

	random.Instance = RNG;
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <RNG_Init+0x48>)
 8000cac:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <RNG_Init+0x4c>)
 8000cae:	601a      	str	r2, [r3, #0]
	HAL_RNG_MspInit(&random);
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <RNG_Init+0x48>)
 8000cb2:	f001 fb73 	bl	800239c <HAL_RNG_MspInit>
	statusRNG = HAL_RNG_Init(&random);
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <RNG_Init+0x48>)
 8000cb8:	f004 fd08 	bl	80056cc <HAL_RNG_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <RNG_Init+0x50>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	20025ab4 	.word	0x20025ab4
 8000cd4:	50060800 	.word	0x50060800
 8000cd8:	20025ac4 	.word	0x20025ac4

08000cdc <GenerateRandNum>:

uint32_t GenerateRandNum(void){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

	uint32_t rando = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]

	statusRNG = HAL_RNG_GenerateRandomNumber(&random, &rando);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <GenerateRandNum+0x28>)
 8000cec:	f004 fd18 	bl	8005720 <HAL_RNG_GenerateRandomNumber>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <GenerateRandNum+0x2c>)
 8000cf6:	701a      	strb	r2, [r3, #0]


	return rando;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20025ab4 	.word	0x20025ab4
 8000d08:	20025ac4 	.word	0x20025ac4

08000d0c <addSchedulerEvent>:
#include "Scheduler.h"

static uint32_t scheduledEvents;

//adds to the scheduler
void addSchedulerEvent(uint32_t eventToBeScheduled){
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventToBeScheduled;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <addSchedulerEvent+0x20>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	4a03      	ldr	r2, [pc, #12]	@ (8000d2c <addSchedulerEvent+0x20>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20025ac8 	.word	0x20025ac8

08000d30 <removeSchedulerEvent>:

//removes from the scheduler
void removeSchedulerEvent(uint32_t eventToBeRemoved){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(eventToBeRemoved);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <removeSchedulerEvent+0x24>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4013      	ands	r3, r2
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <removeSchedulerEvent+0x24>)
 8000d44:	6013      	str	r3, [r2, #0]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20025ac8 	.word	0x20025ac8

08000d58 <getScheduledEvents>:

//returns the 32-bit scheduler instruction
uint32_t getScheduledEvents(){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <getScheduledEvents+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20025ac8 	.word	0x20025ac8

08000d70 <BlockInit>:

const uint8_t allHeights[] = {3, 2, 4, 3, 2, 2, 2};

const uint8_t designator[] = {1, 2, 3, 4, 5, 6, 7};

void BlockInit(Block_RegDef_t* block, uint8_t shape[4][4], uint16_t x, uint16_t y, uint16_t color, uint16_t lineColor, uint8_t height) {
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80bb      	strh	r3, [r7, #4]

    for (int i = 0; i < 4; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e01a      	b.n	8000dc2 <BlockInit+0x52>
        for (int j = 0; j < 4; j++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	e011      	b.n	8000db6 <BlockInit+0x46>
            block->Shape[i][j] = shape[i][j];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	441a      	add	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	7819      	ldrb	r1, [r3, #0]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	441a      	add	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4413      	add	r3, r2
 8000dac:	460a      	mov	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	3301      	adds	r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	ddea      	ble.n	8000d92 <BlockInit+0x22>
    for (int i = 0; i < 4; i++) {
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	dde1      	ble.n	8000d8c <BlockInit+0x1c>
        }
    }
    // Set position, color, and other properties
    block->x = x;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	821a      	strh	r2, [r3, #16]
    block->y = y;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	825a      	strh	r2, [r3, #18]
    block->color = color;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	8c3a      	ldrh	r2, [r7, #32]
 8000dd8:	82da      	strh	r2, [r3, #22]
    block->lineColor = lineColor;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dde:	829a      	strh	r2, [r3, #20]
    block->rotation = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	831a      	strh	r2, [r3, #24]
    block->height = height;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dec:	769a      	strb	r2, [r3, #26]
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <gameStart>:

void gameStart(void){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

	while(1){
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 8000e00:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <gameStart+0x1c>)
 8000e02:	f7ff ff34 	bl	8000c6e <returnTouchStateAndLocation>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f9      	bne.n	8000e00 <gameStart+0x4>

			HAL_Delay(100);
 8000e0c:	2064      	movs	r0, #100	@ 0x64
 8000e0e:	f001 ff73 	bl	8002cf8 <HAL_Delay>
			gameScreen();
 8000e12:	f000 fd33 	bl	800187c <gameScreen>
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 8000e16:	e7f3      	b.n	8000e00 <gameStart+0x4>
 8000e18:	20025ae8 	.word	0x20025ae8

08000e1c <GenerateRandomBlock>:
		}

	}
}
void GenerateRandomBlock(Block_RegDef_t* block){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t blockSelect = GenerateRandNum() % 7;
 8000e24:	f7ff ff5a 	bl	8000cdc <GenerateRandNum>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <GenerateRandomBlock+0x9c>)
 8000e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e30:	1ad1      	subs	r1, r2, r3
 8000e32:	0849      	lsrs	r1, r1, #1
 8000e34:	440b      	add	r3, r1
 8000e36:	0899      	lsrs	r1, r3, #2
 8000e38:	460b      	mov	r3, r1
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	1ad1      	subs	r1, r2, r3
 8000e40:	460b      	mov	r3, r1
 8000e42:	73fb      	strb	r3, [r7, #15]
	block->color = allColors[blockSelect];
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <GenerateRandomBlock+0xa0>)
 8000e48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	82da      	strh	r2, [r3, #22]
	block->height = allHeights[blockSelect];
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec0 <GenerateRandomBlock+0xa4>)
 8000e54:	5cd2      	ldrb	r2, [r2, r3]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	769a      	strb	r2, [r3, #26]
	block->designator = designator[blockSelect];
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <GenerateRandomBlock+0xa8>)
 8000e5e:	5cd2      	ldrb	r2, [r2, r3]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	76da      	strb	r2, [r3, #27]
	for (int i = 0; i < 4; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e01d      	b.n	8000ea6 <GenerateRandomBlock+0x8a>
		    for (int j = 0; j < 4; j++) {
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	e014      	b.n	8000e9a <GenerateRandomBlock+0x7e>
		    	block->Shape[i][j] = tetrisShapes[blockSelect][i][j];
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <GenerateRandomBlock+0xac>)
 8000e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	441a      	add	r2, r3
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4413      	add	r3, r2
 8000e82:	7819      	ldrb	r1, [r3, #0]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	441a      	add	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4413      	add	r3, r2
 8000e90:	460a      	mov	r2, r1
 8000e92:	701a      	strb	r2, [r3, #0]
		    for (int j = 0; j < 4; j++) {
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	3301      	adds	r3, #1
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	dde7      	ble.n	8000e70 <GenerateRandomBlock+0x54>
	for (int i = 0; i < 4; i++) {
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	ddde      	ble.n	8000e6a <GenerateRandomBlock+0x4e>
		        }
		 }


}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24924925 	.word	0x24924925
 8000ebc:	08006848 	.word	0x08006848
 8000ec0:	08006858 	.word	0x08006858
 8000ec4:	08006860 	.word	0x08006860
 8000ec8:	2000011c 	.word	0x2000011c

08000ecc <drawTetrisShape>:

void drawTetrisShape(Block_RegDef_t* block){
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 4; i++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e058      	b.n	8000f8c <drawTetrisShape+0xc0>
	    for (int j = 0; j < 4; j++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	e04f      	b.n	8000f80 <drawTetrisShape+0xb4>
	        if (block->Shape[i][j] == 1) {
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	441a      	add	r2, r3
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d143      	bne.n	8000f7a <drawTetrisShape+0xae>
	            uint16_t blockX = block->x + j * 24; // Adjust block size if necessary
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	8a1a      	ldrh	r2, [r3, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	0049      	lsls	r1, r1, #1
 8000efe:	440b      	add	r3, r1
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	4413      	add	r3, r2
 8000f06:	81fb      	strh	r3, [r7, #14]
	            uint16_t blockY = block->y + i * 24;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	8a5a      	ldrh	r2, [r3, #18]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	0049      	lsls	r1, r1, #1
 8000f14:	440b      	add	r3, r1
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	81bb      	strh	r3, [r7, #12]
	            LCD_Draw_Square_Fill(blockX, blockY, blockX + 24, blockY + 24, block->color);
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	3318      	adds	r3, #24
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	89bb      	ldrh	r3, [r7, #12]
 8000f26:	3318      	adds	r3, #24
 8000f28:	b29c      	uxth	r4, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8adb      	ldrh	r3, [r3, #22]
 8000f2e:	89b9      	ldrh	r1, [r7, #12]
 8000f30:	89f8      	ldrh	r0, [r7, #14]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4623      	mov	r3, r4
 8000f36:	f7ff fd3b 	bl	80009b0 <LCD_Draw_Square_Fill>
	            LCD_Draw_Vertical_Line(blockX, blockY, 24, block->lineColor);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8a9b      	ldrh	r3, [r3, #20]
 8000f3e:	89b9      	ldrh	r1, [r7, #12]
 8000f40:	89f8      	ldrh	r0, [r7, #14]
 8000f42:	2218      	movs	r2, #24
 8000f44:	f7ff fd62 	bl	8000a0c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(blockX, blockY, 24, block->lineColor);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8a9b      	ldrh	r3, [r3, #20]
 8000f4c:	89b9      	ldrh	r1, [r7, #12]
 8000f4e:	89f8      	ldrh	r0, [r7, #14]
 8000f50:	2218      	movs	r2, #24
 8000f52:	f7ff fd82 	bl	8000a5a <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Vertical_Line(blockX+24, blockY, 24, block->lineColor);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	3318      	adds	r3, #24
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	8a9b      	ldrh	r3, [r3, #20]
 8000f60:	89b9      	ldrh	r1, [r7, #12]
 8000f62:	2218      	movs	r2, #24
 8000f64:	f7ff fd52 	bl	8000a0c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(blockX, blockY+24, 24, block->lineColor);
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	3318      	adds	r3, #24
 8000f6c:	b299      	uxth	r1, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	8a9b      	ldrh	r3, [r3, #20]
 8000f72:	89f8      	ldrh	r0, [r7, #14]
 8000f74:	2218      	movs	r2, #24
 8000f76:	f7ff fd70 	bl	8000a5a <LCD_Draw_Horizontal_Line>
	    for (int j = 0; j < 4; j++) {
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	ddac      	ble.n	8000ee0 <drawTetrisShape+0x14>
	for (int i = 0; i < 4; i++) {
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	dda3      	ble.n	8000eda <drawTetrisShape+0xe>
	            }
	        }
	    }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}

08000f9c <Rotate90>:




void Rotate90() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
	uint16_t temp = currentBlock.color;
 8000fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8001094 <Rotate90+0xf8>)
 8000fa4:	8adb      	ldrh	r3, [r3, #22]
 8000fa6:	82fb      	strh	r3, [r7, #22]
	currentBlock.lineColor = LCD_COLOR_WHITE;
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8001094 <Rotate90+0xf8>)
 8000faa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fae:	829a      	strh	r2, [r3, #20]
	currentBlock.color = LCD_COLOR_WHITE;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	@ (8001094 <Rotate90+0xf8>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fb6:	82da      	strh	r2, [r3, #22]
	drawTetrisShape(&currentBlock);
 8000fb8:	4836      	ldr	r0, [pc, #216]	@ (8001094 <Rotate90+0xf8>)
 8000fba:	f7ff ff87 	bl	8000ecc <drawTetrisShape>
	currentBlock.lineColor = LCD_COLOR_BLACK;
 8000fbe:	4b35      	ldr	r3, [pc, #212]	@ (8001094 <Rotate90+0xf8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	829a      	strh	r2, [r3, #20]
	currentBlock.color = temp;
 8000fc4:	4a33      	ldr	r2, [pc, #204]	@ (8001094 <Rotate90+0xf8>)
 8000fc6:	8afb      	ldrh	r3, [r7, #22]
 8000fc8:	82d3      	strh	r3, [r2, #22]
	uint8_t oldX = currentBlock.x;
 8000fca:	4b32      	ldr	r3, [pc, #200]	@ (8001094 <Rotate90+0xf8>)
 8000fcc:	8a1b      	ldrh	r3, [r3, #16]
 8000fce:	757b      	strb	r3, [r7, #21]
	uint8_t oldY = currentBlock.y;
 8000fd0:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <Rotate90+0xf8>)
 8000fd2:	8a5b      	ldrh	r3, [r3, #18]
 8000fd4:	753b      	strb	r3, [r7, #20]

	uint8_t temp_shape[4][4] = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < 4; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe6:	e01d      	b.n	8001024 <Rotate90+0x88>
        for (int j = 0; j < 4; j++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	e014      	b.n	8001018 <Rotate90+0x7c>
        	temp_shape[j][4-i-1] = currentBlock.Shape[i][j];
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	f1c3 0303 	rsb	r3, r3, #3
 8000ff4:	4927      	ldr	r1, [pc, #156]	@ (8001094 <Rotate90+0xf8>)
 8000ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4411      	add	r1, r2
 8000ffc:	6a3a      	ldr	r2, [r7, #32]
 8000ffe:	440a      	add	r2, r1
 8001000:	7811      	ldrb	r1, [r2, #0]
 8001002:	6a3a      	ldr	r2, [r7, #32]
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	3228      	adds	r2, #40	@ 0x28
 8001008:	443a      	add	r2, r7
 800100a:	4413      	add	r3, r2
 800100c:	3b24      	subs	r3, #36	@ 0x24
 800100e:	460a      	mov	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	3301      	adds	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	2b03      	cmp	r3, #3
 800101c:	dde7      	ble.n	8000fee <Rotate90+0x52>
	for (int i = 0; i < 4; i++) {
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
 8001024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001026:	2b03      	cmp	r3, #3
 8001028:	ddde      	ble.n	8000fe8 <Rotate90+0x4c>
        }
    }
	for (int i = 0; i < 4; i++) {
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e01b      	b.n	8001068 <Rotate90+0xcc>
	    for (int j = 0; j < 4; j++) {
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	e012      	b.n	800105c <Rotate90+0xc0>
	    	currentBlock.Shape[i][j] = temp_shape[i][j];
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	3328      	adds	r3, #40	@ 0x28
 800103c:	19da      	adds	r2, r3, r7
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4413      	add	r3, r2
 8001042:	3b24      	subs	r3, #36	@ 0x24
 8001044:	7819      	ldrb	r1, [r3, #0]
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <Rotate90+0xf8>)
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	441a      	add	r2, r3
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4413      	add	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
	    for (int j = 0; j < 4; j++) {
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	3301      	adds	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b03      	cmp	r3, #3
 8001060:	dde9      	ble.n	8001036 <Rotate90+0x9a>
	for (int i = 0; i < 4; i++) {
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b03      	cmp	r3, #3
 800106c:	dde0      	ble.n	8001030 <Rotate90+0x94>
	        }
	}

	currentBlock.x = oldX;
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <Rotate90+0xf8>)
 8001074:	821a      	strh	r2, [r3, #16]
	currentBlock.y = oldY;
 8001076:	7d3b      	ldrb	r3, [r7, #20]
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <Rotate90+0xf8>)
 800107c:	825a      	strh	r2, [r3, #18]
	changeHeight(&currentBlock);
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <Rotate90+0xf8>)
 8001080:	f000 f980 	bl	8001384 <changeHeight>
	//saveShape(&currentBlock, temp_shape);
	drawTetrisShape(&currentBlock);
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <Rotate90+0xf8>)
 8001086:	f7ff ff21 	bl	8000ecc <drawTetrisShape>
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20025acc 	.word	0x20025acc

08001098 <dropBlock>:
		}
}



void dropBlock(void){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0



		uint16_t temp = currentBlock.color;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <dropBlock+0x48>)
 80010a0:	8adb      	ldrh	r3, [r3, #22]
 80010a2:	80fb      	strh	r3, [r7, #6]
		currentBlock.lineColor = LCD_COLOR_WHITE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <dropBlock+0x48>)
 80010a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010aa:	829a      	strh	r2, [r3, #20]
		currentBlock.color = LCD_COLOR_WHITE;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <dropBlock+0x48>)
 80010ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b2:	82da      	strh	r2, [r3, #22]
		drawTetrisShape(&currentBlock);
 80010b4:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <dropBlock+0x48>)
 80010b6:	f7ff ff09 	bl	8000ecc <drawTetrisShape>
		//clearBoard(&currentBlock);
		currentBlock.y += 24;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <dropBlock+0x48>)
 80010bc:	8a5b      	ldrh	r3, [r3, #18]
 80010be:	3318      	adds	r3, #24
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <dropBlock+0x48>)
 80010c4:	825a      	strh	r2, [r3, #18]
		currentBlock.lineColor = LCD_COLOR_BLACK;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <dropBlock+0x48>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	829a      	strh	r2, [r3, #20]
		currentBlock.color = temp;
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <dropBlock+0x48>)
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	82d3      	strh	r3, [r2, #22]
		drawTetrisShape(&currentBlock);
 80010d2:	4803      	ldr	r0, [pc, #12]	@ (80010e0 <dropBlock+0x48>)
 80010d4:	f7ff fefa 	bl	8000ecc <drawTetrisShape>
		//updateBoard(&currentBlock);


}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20025acc 	.word	0x20025acc

080010e4 <moveLeft>:
void moveLeft(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

	bool flag = true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 4; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	e035      	b.n	8001160 <moveLeft+0x7c>
		    for (int j = 0; j < 4; j++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e02c      	b.n	8001154 <moveLeft+0x70>
		        if (currentBlock.Shape[i][j] == 1){
 80010fa:	4a2b      	ldr	r2, [pc, #172]	@ (80011a8 <moveLeft+0xc4>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	441a      	add	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d120      	bne.n	800114e <moveLeft+0x6a>
		        	if(tetrisBoard[((currentBlock.y/24)) + i][(currentBlock.x/24) + j - 1] == 1){
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <moveLeft+0xc4>)
 800110e:	8a5b      	ldrh	r3, [r3, #18]
 8001110:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <moveLeft+0xc8>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	441a      	add	r2, r3
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <moveLeft+0xc4>)
 8001122:	8a1b      	ldrh	r3, [r3, #16]
 8001124:	4921      	ldr	r1, [pc, #132]	@ (80011ac <moveLeft+0xc8>)
 8001126:	fba1 1303 	umull	r1, r3, r1, r3
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	b29b      	uxth	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	440b      	add	r3, r1
 8001134:	1e59      	subs	r1, r3, #1
 8001136:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <moveLeft+0xcc>)
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4403      	add	r3, r0
 8001142:	440b      	add	r3, r1
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <moveLeft+0x6a>
		        		flag = false;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
		    for (int j = 0; j < 4; j++) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	ddcf      	ble.n	80010fa <moveLeft+0x16>
	for (int i = 0; i < 4; i++) {
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b03      	cmp	r3, #3
 8001164:	ddc6      	ble.n	80010f4 <moveLeft+0x10>
		        	}
		        }
		    }
		}
	if(flag == true){
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <moveLeft+0xbc>
		uint16_t temp = currentBlock.color;
 800116c:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <moveLeft+0xc4>)
 800116e:	8adb      	ldrh	r3, [r3, #22]
 8001170:	807b      	strh	r3, [r7, #2]
		currentBlock.lineColor = LCD_COLOR_WHITE;
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <moveLeft+0xc4>)
 8001174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001178:	829a      	strh	r2, [r3, #20]
		currentBlock.color = LCD_COLOR_WHITE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <moveLeft+0xc4>)
 800117c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001180:	82da      	strh	r2, [r3, #22]
		drawTetrisShape(&currentBlock);
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <moveLeft+0xc4>)
 8001184:	f7ff fea2 	bl	8000ecc <drawTetrisShape>
		currentBlock.x -= 24;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <moveLeft+0xc4>)
 800118a:	8a1b      	ldrh	r3, [r3, #16]
 800118c:	3b18      	subs	r3, #24
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <moveLeft+0xc4>)
 8001192:	821a      	strh	r2, [r3, #16]
		currentBlock.lineColor = LCD_COLOR_BLACK;
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <moveLeft+0xc4>)
 8001196:	2200      	movs	r2, #0
 8001198:	829a      	strh	r2, [r3, #20]
		currentBlock.color = temp;
 800119a:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <moveLeft+0xc4>)
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	82d3      	strh	r3, [r2, #22]
	else{

	}


}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20025acc 	.word	0x20025acc
 80011ac:	aaaaaaab 	.word	0xaaaaaaab
 80011b0:	20000004 	.word	0x20000004

080011b4 <moveRight>:

void moveRight(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

	bool flag = true;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 4; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	e035      	b.n	8001230 <moveRight+0x7c>
		    for (int j = 0; j < 4; j++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	e02c      	b.n	8001224 <moveRight+0x70>
		        if (currentBlock.Shape[i][j] == 1){
 80011ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <moveRight+0xc4>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	441a      	add	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d120      	bne.n	800121e <moveRight+0x6a>
		        	if(tetrisBoard[((currentBlock.y/24)) + i][(currentBlock.x/24) + j + 1] == 1){
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <moveRight+0xc4>)
 80011de:	8a5b      	ldrh	r3, [r3, #18]
 80011e0:	4a26      	ldr	r2, [pc, #152]	@ (800127c <moveRight+0xc8>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	441a      	add	r2, r3
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <moveRight+0xc4>)
 80011f2:	8a1b      	ldrh	r3, [r3, #16]
 80011f4:	4921      	ldr	r1, [pc, #132]	@ (800127c <moveRight+0xc8>)
 80011f6:	fba1 1303 	umull	r1, r3, r1, r3
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	440b      	add	r3, r1
 8001204:	1c59      	adds	r1, r3, #1
 8001206:	481e      	ldr	r0, [pc, #120]	@ (8001280 <moveRight+0xcc>)
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4403      	add	r3, r0
 8001212:	440b      	add	r3, r1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <moveRight+0x6a>
		        		flag = false;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
		    for (int j = 0; j < 4; j++) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b03      	cmp	r3, #3
 8001228:	ddcf      	ble.n	80011ca <moveRight+0x16>
	for (int i = 0; i < 4; i++) {
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3301      	adds	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b03      	cmp	r3, #3
 8001234:	ddc6      	ble.n	80011c4 <moveRight+0x10>
		        	}
		        }
		    }
		}
	if(flag == true){
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d019      	beq.n	8001270 <moveRight+0xbc>
		uint16_t temp = currentBlock.color;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <moveRight+0xc4>)
 800123e:	8adb      	ldrh	r3, [r3, #22]
 8001240:	807b      	strh	r3, [r7, #2]
		currentBlock.lineColor = LCD_COLOR_WHITE;
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <moveRight+0xc4>)
 8001244:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001248:	829a      	strh	r2, [r3, #20]
		currentBlock.color = LCD_COLOR_WHITE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <moveRight+0xc4>)
 800124c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001250:	82da      	strh	r2, [r3, #22]
		drawTetrisShape(&currentBlock);
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <moveRight+0xc4>)
 8001254:	f7ff fe3a 	bl	8000ecc <drawTetrisShape>
		currentBlock.x += 24;
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <moveRight+0xc4>)
 800125a:	8a1b      	ldrh	r3, [r3, #16]
 800125c:	3318      	adds	r3, #24
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <moveRight+0xc4>)
 8001262:	821a      	strh	r2, [r3, #16]
		currentBlock.lineColor = LCD_COLOR_BLACK;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <moveRight+0xc4>)
 8001266:	2200      	movs	r2, #0
 8001268:	829a      	strh	r2, [r3, #20]
		currentBlock.color = temp;
 800126a:	4a03      	ldr	r2, [pc, #12]	@ (8001278 <moveRight+0xc4>)
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	82d3      	strh	r3, [r2, #22]
	}
	else{

	}

}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20025acc 	.word	0x20025acc
 800127c:	aaaaaaab 	.word	0xaaaaaaab
 8001280:	20000004 	.word	0x20000004

08001284 <isValidMove>:

bool isValidMove(Block_RegDef_t * block){
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

	bool flag = true;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]

	if(((block->y/24) + block->height) >= BOARD_HEIGHT){
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	8a5b      	ldrh	r3, [r3, #18]
 8001294:	4a39      	ldr	r2, [pc, #228]	@ (800137c <isValidMove+0xf8>)
 8001296:	fba2 2303 	umull	r2, r3, r2, r3
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7e9b      	ldrb	r3, [r3, #26]
 80012a4:	4413      	add	r3, r2
 80012a6:	2b0d      	cmp	r3, #13
 80012a8:	dd01      	ble.n	80012ae <isValidMove+0x2a>
		flag = false;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
	}

	for (int i = 0; i < 4; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	e059      	b.n	8001368 <isValidMove+0xe4>
	    for (int j = 0; j < 4; j++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e050      	b.n	800135c <isValidMove+0xd8>
	        if (block->Shape[i][j] == 1){
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	441a      	add	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d144      	bne.n	8001356 <isValidMove+0xd2>
	        	if((block->y/24) + i >=  BOARD_HEIGHT || (block->x/24) + j >= BOARD_WIDTH || (block->x/24) + j <= 0 || tetrisBoard[((block->y/24)) + i + 1][(block->x/24) + j] == 1){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	8a5b      	ldrh	r3, [r3, #18]
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <isValidMove+0xf8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4413      	add	r3, r2
 80012e0:	2b0d      	cmp	r3, #13
 80012e2:	dc36      	bgt.n	8001352 <isValidMove+0xce>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8a1b      	ldrh	r3, [r3, #16]
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <isValidMove+0xf8>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	2b0b      	cmp	r3, #11
 80012fa:	dc2a      	bgt.n	8001352 <isValidMove+0xce>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	8a1b      	ldrh	r3, [r3, #16]
 8001300:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <isValidMove+0xf8>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	b29b      	uxth	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd1e      	ble.n	8001352 <isValidMove+0xce>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	8a5b      	ldrh	r3, [r3, #18]
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <isValidMove+0xf8>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4413      	add	r3, r2
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	8a1b      	ldrh	r3, [r3, #16]
 800132e:	4913      	ldr	r1, [pc, #76]	@ (800137c <isValidMove+0xf8>)
 8001330:	fba1 1303 	umull	r1, r3, r1, r3
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b29b      	uxth	r3, r3
 8001338:	4619      	mov	r1, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4419      	add	r1, r3
 800133e:	4810      	ldr	r0, [pc, #64]	@ (8001380 <isValidMove+0xfc>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4403      	add	r3, r0
 800134a:	440b      	add	r3, r1
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <isValidMove+0xd2>
	        		flag = false;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
	    for (int j = 0; j < 4; j++) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b03      	cmp	r3, #3
 8001360:	ddab      	ble.n	80012ba <isValidMove+0x36>
	for (int i = 0; i < 4; i++) {
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	3301      	adds	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b03      	cmp	r3, #3
 800136c:	dda2      	ble.n	80012b4 <isValidMove+0x30>
	        	}
	        }
	    }
	}
	return flag;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001370:	4618      	mov	r0, r3
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	aaaaaaab 	.word	0xaaaaaaab
 8001380:	20000004 	.word	0x20000004

08001384 <changeHeight>:

void changeHeight(Block_RegDef_t* block){
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

	uint8_t d = block->designator;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7edb      	ldrb	r3, [r3, #27]
 8001390:	73fb      	strb	r3, [r7, #15]
	uint8_t h = block->height;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7e9b      	ldrb	r3, [r3, #26]
 8001396:	73bb      	strb	r3, [r7, #14]

	if(d == 3){
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d10a      	bne.n	80013b4 <changeHeight+0x30>
		if(h == 4){
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d103      	bne.n	80013ac <changeHeight+0x28>
			block->height = 1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	769a      	strb	r2, [r3, #26]
		}else{block->height = 3;}
	}
	else{

	}
}
 80013aa:	e01c      	b.n	80013e6 <changeHeight+0x62>
		}else{block->height = 4;}
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2204      	movs	r2, #4
 80013b0:	769a      	strb	r2, [r3, #26]
}
 80013b2:	e018      	b.n	80013e6 <changeHeight+0x62>
	else if(d == 1 || d == 4 || d == 5 || d == 6 || d == 7){
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d00b      	beq.n	80013d2 <changeHeight+0x4e>
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d008      	beq.n	80013d2 <changeHeight+0x4e>
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d005      	beq.n	80013d2 <changeHeight+0x4e>
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d002      	beq.n	80013d2 <changeHeight+0x4e>
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	d109      	bne.n	80013e6 <changeHeight+0x62>
		if(h == 3){
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d103      	bne.n	80013e0 <changeHeight+0x5c>
			block->height = 2;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	769a      	strb	r2, [r3, #26]
}
 80013de:	e002      	b.n	80013e6 <changeHeight+0x62>
		}else{block->height = 3;}
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2203      	movs	r2, #3
 80013e4:	769a      	strb	r2, [r3, #26]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <updateBoard>:

void updateBoard(Block_RegDef_t* block) {
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e049      	b.n	8001496 <updateBoard+0xa2>
        for (int j = 0; j < 4; j++) {
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	e040      	b.n	800148a <updateBoard+0x96>
            if (block->Shape[i][j] == 1) {
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	441a      	add	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d134      	bne.n	8001484 <updateBoard+0x90>
                // Mark the game board at the block's position as filled
                if ((block->y/24) + i < BOARD_HEIGHT && (block->x/24) + j < BOARD_WIDTH) {
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8a5b      	ldrh	r3, [r3, #18]
 800141e:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <updateBoard+0xb8>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4413      	add	r3, r2
 800142e:	2b0d      	cmp	r3, #13
 8001430:	dc28      	bgt.n	8001484 <updateBoard+0x90>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	8a1b      	ldrh	r3, [r3, #16]
 8001436:	4a1d      	ldr	r2, [pc, #116]	@ (80014ac <updateBoard+0xb8>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4413      	add	r3, r2
 8001446:	2b0b      	cmp	r3, #11
 8001448:	dc1c      	bgt.n	8001484 <updateBoard+0x90>
                    tetrisBoard[(block->y/24) + i][(block->x/24) + j] = 1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	8a5b      	ldrh	r3, [r3, #18]
 800144e:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <updateBoard+0xb8>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	441a      	add	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8a1b      	ldrh	r3, [r3, #16]
 8001462:	4912      	ldr	r1, [pc, #72]	@ (80014ac <updateBoard+0xb8>)
 8001464:	fba1 1303 	umull	r1, r3, r1, r3
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	b29b      	uxth	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	4419      	add	r1, r3
 8001472:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <updateBoard+0xbc>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4403      	add	r3, r0
 800147e:	440b      	add	r3, r1
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) {
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3301      	adds	r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b03      	cmp	r3, #3
 800148e:	ddbb      	ble.n	8001408 <updateBoard+0x14>
    for (int i = 0; i < 4; i++) {
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3301      	adds	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b03      	cmp	r3, #3
 800149a:	ddb2      	ble.n	8001402 <updateBoard+0xe>
                }
            }
        }
    }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	aaaaaaab 	.word	0xaaaaaaab
 80014b0:	20000004 	.word	0x20000004

080014b4 <mainMenu>:
            }
        }
    }
}

void mainMenu(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0b6      	sub	sp, #216	@ 0xd8
 80014b8:	af04      	add	r7, sp, #16

	LCD_Clear(0, LCD_COLOR_WHITE);
 80014ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff faf2 	bl	8000aa8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fb11 	bl	8000aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80014ca:	485f      	ldr	r0, [pc, #380]	@ (8001648 <mainMenu+0x194>)
 80014cc:	f7ff fb1e 	bl	8000b0c <LCD_SetFont>

	LCD_DisplayChar(70,40,'T');
 80014d0:	2254      	movs	r2, #84	@ 0x54
 80014d2:	2128      	movs	r1, #40	@ 0x28
 80014d4:	2046      	movs	r0, #70	@ 0x46
 80014d6:	f7ff fb97 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(85,40,'E');
 80014da:	2245      	movs	r2, #69	@ 0x45
 80014dc:	2128      	movs	r1, #40	@ 0x28
 80014de:	2055      	movs	r0, #85	@ 0x55
 80014e0:	f7ff fb92 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(100,40,'T');
 80014e4:	2254      	movs	r2, #84	@ 0x54
 80014e6:	2128      	movs	r1, #40	@ 0x28
 80014e8:	2064      	movs	r0, #100	@ 0x64
 80014ea:	f7ff fb8d 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(115,40,'R');
 80014ee:	2252      	movs	r2, #82	@ 0x52
 80014f0:	2128      	movs	r1, #40	@ 0x28
 80014f2:	2073      	movs	r0, #115	@ 0x73
 80014f4:	f7ff fb88 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(130,40,'I');
 80014f8:	2249      	movs	r2, #73	@ 0x49
 80014fa:	2128      	movs	r1, #40	@ 0x28
 80014fc:	2082      	movs	r0, #130	@ 0x82
 80014fe:	f7ff fb83 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(145,40,'S');
 8001502:	2253      	movs	r2, #83	@ 0x53
 8001504:	2128      	movs	r1, #40	@ 0x28
 8001506:	2091      	movs	r0, #145	@ 0x91
 8001508:	f7ff fb7e 	bl	8000c08 <LCD_DisplayChar>

	LCD_DisplayChar(90,200,'S');
 800150c:	2253      	movs	r2, #83	@ 0x53
 800150e:	21c8      	movs	r1, #200	@ 0xc8
 8001510:	205a      	movs	r0, #90	@ 0x5a
 8001512:	f7ff fb79 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(100,200,'t');
 8001516:	2274      	movs	r2, #116	@ 0x74
 8001518:	21c8      	movs	r1, #200	@ 0xc8
 800151a:	2064      	movs	r0, #100	@ 0x64
 800151c:	f7ff fb74 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(110,200,'a');
 8001520:	2261      	movs	r2, #97	@ 0x61
 8001522:	21c8      	movs	r1, #200	@ 0xc8
 8001524:	206e      	movs	r0, #110	@ 0x6e
 8001526:	f7ff fb6f 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(120,200,'r');
 800152a:	2272      	movs	r2, #114	@ 0x72
 800152c:	21c8      	movs	r1, #200	@ 0xc8
 800152e:	2078      	movs	r0, #120	@ 0x78
 8001530:	f7ff fb6a 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(130,200,'t');
 8001534:	2274      	movs	r2, #116	@ 0x74
 8001536:	21c8      	movs	r1, #200	@ 0xc8
 8001538:	2082      	movs	r0, #130	@ 0x82
 800153a:	f7ff fb65 	bl	8000c08 <LCD_DisplayChar>
	Block_RegDef_t allBlocks[7];
	BlockInit(&allBlocks[0], O_Shape, 96, 136, LCD_COLOR_RED, LCD_COLOR_BLACK, allHeights[0]);
 800153e:	2303      	movs	r3, #3
 8001540:	4638      	mov	r0, r7
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2388      	movs	r3, #136	@ 0x88
 8001550:	2260      	movs	r2, #96	@ 0x60
 8001552:	493e      	ldr	r1, [pc, #248]	@ (800164c <mainMenu+0x198>)
 8001554:	f7ff fc0c 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[1], I_Shape, 24, 24,LCD_COLOR_CYAN, LCD_COLOR_BLACK, allHeights[1]);
 8001558:	2202      	movs	r2, #2
 800155a:	463b      	mov	r3, r7
 800155c:	f103 001c 	add.w	r0, r3, #28
 8001560:	9202      	str	r2, [sp, #8]
 8001562:	2300      	movs	r3, #0
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2318      	movs	r3, #24
 800156e:	2218      	movs	r2, #24
 8001570:	4937      	ldr	r1, [pc, #220]	@ (8001650 <mainMenu+0x19c>)
 8001572:	f7ff fbfd 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[2], T_Shape, 160, 240,LCD_COLOR_MAGENTA, LCD_COLOR_BLACK, allHeights[2]);
 8001576:	2204      	movs	r2, #4
 8001578:	463b      	mov	r3, r7
 800157a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800157e:	9202      	str	r2, [sp, #8]
 8001580:	2300      	movs	r3, #0
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	23f0      	movs	r3, #240	@ 0xf0
 800158c:	22a0      	movs	r2, #160	@ 0xa0
 800158e:	4931      	ldr	r1, [pc, #196]	@ (8001654 <mainMenu+0x1a0>)
 8001590:	f7ff fbee 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[3], L_Shape, 24, 220,LCD_COLOR_GREEN, LCD_COLOR_BLACK, allHeights[3]);
 8001594:	2203      	movs	r2, #3
 8001596:	463b      	mov	r3, r7
 8001598:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800159c:	9202      	str	r2, [sp, #8]
 800159e:	2300      	movs	r3, #0
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	23dc      	movs	r3, #220	@ 0xdc
 80015aa:	2218      	movs	r2, #24
 80015ac:	492a      	ldr	r1, [pc, #168]	@ (8001658 <mainMenu+0x1a4>)
 80015ae:	f7ff fbdf 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[4], J_Shape, 180, 24,LCD_COLOR_YELLOW, LCD_COLOR_BLACK, allHeights[4]);
 80015b2:	2202      	movs	r2, #2
 80015b4:	463b      	mov	r3, r7
 80015b6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80015ba:	9202      	str	r2, [sp, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2318      	movs	r3, #24
 80015c8:	22b4      	movs	r2, #180	@ 0xb4
 80015ca:	4924      	ldr	r1, [pc, #144]	@ (800165c <mainMenu+0x1a8>)
 80015cc:	f7ff fbd0 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[5], S_Shape, 12, 136,LCD_COLOR_BLUE, LCD_COLOR_BLACK, allHeights[5]);
 80015d0:	2202      	movs	r2, #2
 80015d2:	463b      	mov	r3, r7
 80015d4:	f103 008c 	add.w	r0, r3, #140	@ 0x8c
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	2300      	movs	r3, #0
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	231f      	movs	r3, #31
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2388      	movs	r3, #136	@ 0x88
 80015e4:	220c      	movs	r2, #12
 80015e6:	491e      	ldr	r1, [pc, #120]	@ (8001660 <mainMenu+0x1ac>)
 80015e8:	f7ff fbc2 	bl	8000d70 <BlockInit>
	BlockInit(&allBlocks[6], Z_Shape, 156,136,LCD_COLOR_GREY, LCD_COLOR_BLACK, allHeights[6]);
 80015ec:	2202      	movs	r2, #2
 80015ee:	463b      	mov	r3, r7
 80015f0:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 80015f4:	9202      	str	r2, [sp, #8]
 80015f6:	2300      	movs	r3, #0
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f24f 73de 	movw	r3, #63454	@ 0xf7de
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2388      	movs	r3, #136	@ 0x88
 8001602:	229c      	movs	r2, #156	@ 0x9c
 8001604:	4917      	ldr	r1, [pc, #92]	@ (8001664 <mainMenu+0x1b0>)
 8001606:	f7ff fbb3 	bl	8000d70 <BlockInit>

	for(int i = 0; i < 7; i++){
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001610:	e00f      	b.n	8001632 <mainMenu+0x17e>
		drawTetrisShape(&allBlocks[i]);
 8001612:	4639      	mov	r1, r7
 8001614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fc52 	bl	8000ecc <drawTetrisShape>
	for(int i = 0; i < 7; i++){
 8001628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800162c:	3301      	adds	r3, #1
 800162e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001636:	2b06      	cmp	r3, #6
 8001638:	ddeb      	ble.n	8001612 <mainMenu+0x15e>
	}

	gameStart();
 800163a:	f7ff fbdf 	bl	8000dfc <gameStart>
}
 800163e:	bf00      	nop
 8001640:	37c8      	adds	r7, #200	@ 0xc8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000138 	.word	0x20000138
 800164c:	200000bc 	.word	0x200000bc
 8001650:	200000cc 	.word	0x200000cc
 8001654:	200000ec 	.word	0x200000ec
 8001658:	200000ac 	.word	0x200000ac
 800165c:	200000dc 	.word	0x200000dc
 8001660:	200000fc 	.word	0x200000fc
 8001664:	2000010c 	.word	0x2000010c

08001668 <checkTop>:

void checkTop(void){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
	for(int i = 1; i < BOARD_WIDTH - 1; i++){
 800166e:	2301      	movs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	e00b      	b.n	800168c <checkTop+0x24>
		if(tetrisBoard[0][i] == 1){
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <checkTop+0x38>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <checkTop+0x1e>
			gameRunning = 0;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <checkTop+0x3c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < BOARD_WIDTH - 1; i++){
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3301      	adds	r3, #1
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b0a      	cmp	r3, #10
 8001690:	ddf0      	ble.n	8001674 <checkTop+0xc>
		}
	}
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000004 	.word	0x20000004
 80016a4:	20000002 	.word	0x20000002

080016a8 <gameEnd>:
//	for(int i = 1; i < BOARD_WIDTH - 1;i++){
//		tetrisBoard[row][i] = 0;
//		LCD_Draw_Square_Fill(0, row *24, 239, (row *24) + 24, LCD_COLOR_WHITE);
//	}
//}
void gameEnd(void){
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b08d      	sub	sp, #52	@ 0x34
 80016ac:	af00      	add	r7, sp, #0

	LCD_Clear(0, LCD_COLOR_BLACK);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff f9f9 	bl	8000aa8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80016b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016ba:	f7ff fa17 	bl	8000aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80016be:	4869      	ldr	r0, [pc, #420]	@ (8001864 <gameEnd+0x1bc>)
 80016c0:	f7ff fa24 	bl	8000b0c <LCD_SetFont>

	LCD_DisplayChar(70,40,'U');
 80016c4:	2255      	movs	r2, #85	@ 0x55
 80016c6:	2128      	movs	r1, #40	@ 0x28
 80016c8:	2046      	movs	r0, #70	@ 0x46
 80016ca:	f7ff fa9d 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(95,40,'T');
 80016ce:	2254      	movs	r2, #84	@ 0x54
 80016d0:	2128      	movs	r1, #40	@ 0x28
 80016d2:	205f      	movs	r0, #95	@ 0x5f
 80016d4:	f7ff fa98 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(110,40,'R');
 80016d8:	2252      	movs	r2, #82	@ 0x52
 80016da:	2128      	movs	r1, #40	@ 0x28
 80016dc:	206e      	movs	r0, #110	@ 0x6e
 80016de:	f7ff fa93 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(125,40,'A');
 80016e2:	2241      	movs	r2, #65	@ 0x41
 80016e4:	2128      	movs	r1, #40	@ 0x28
 80016e6:	207d      	movs	r0, #125	@ 0x7d
 80016e8:	f7ff fa8e 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(140,40,'S');
 80016ec:	2253      	movs	r2, #83	@ 0x53
 80016ee:	2128      	movs	r1, #40	@ 0x28
 80016f0:	208c      	movs	r0, #140	@ 0x8c
 80016f2:	f7ff fa89 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(155,40,'H');
 80016f6:	2248      	movs	r2, #72	@ 0x48
 80016f8:	2128      	movs	r1, #40	@ 0x28
 80016fa:	209b      	movs	r0, #155	@ 0x9b
 80016fc:	f7ff fa84 	bl	8000c08 <LCD_DisplayChar>


	char elapsed[] = {'E','l','a','p','s','e','d',' ','T','i','m','e',':'};
 8001700:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <gameEnd+0x1c0>)
 8001702:	f107 0410 	add.w	r4, r7, #16
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	c407      	stmia	r4!, {r0, r1, r2}
 800170a:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < 13; i++){
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001710:	e028      	b.n	8001764 <gameEnd+0xbc>
		if(i < 7){
 8001712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001714:	2b06      	cmp	r3, #6
 8001716:	dc07      	bgt.n	8001728 <gameEnd+0x80>
			LCD_SetTextColor(allColors[i]);
 8001718:	4a54      	ldr	r2, [pc, #336]	@ (800186c <gameEnd+0x1c4>)
 800171a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff f9e3 	bl	8000aec <LCD_SetTextColor>
 8001726:	e007      	b.n	8001738 <gameEnd+0x90>
		}
		else{
			LCD_SetTextColor(allColors[i-7]);
 8001728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800172a:	3b07      	subs	r3, #7
 800172c:	4a4f      	ldr	r2, [pc, #316]	@ (800186c <gameEnd+0x1c4>)
 800172e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f9da 	bl	8000aec <LCD_SetTextColor>
		}

		LCD_DisplayChar(50 + (11*i),80,elapsed[i]);
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	441a      	add	r2, r3
 8001742:	0052      	lsls	r2, r2, #1
 8001744:	4413      	add	r3, r2
 8001746:	b29b      	uxth	r3, r3
 8001748:	3332      	adds	r3, #50	@ 0x32
 800174a:	b298      	uxth	r0, r3
 800174c:	f107 0210 	add.w	r2, r7, #16
 8001750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	2150      	movs	r1, #80	@ 0x50
 800175a:	f7ff fa55 	bl	8000c08 <LCD_DisplayChar>
	for(int i = 0; i < 13; i++){
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	3301      	adds	r3, #1
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001766:	2b0c      	cmp	r3, #12
 8001768:	ddd3      	ble.n	8001712 <gameEnd+0x6a>
	}
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800176a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800176e:	f7ff f9bd 	bl	8000aec <LCD_SetTextColor>
	//elapsedTime = (endTime - startTime) / 1000;
	uint32_t hours = elapsedTime / 3600;
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <gameEnd+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a3f      	ldr	r2, [pc, #252]	@ (8001874 <gameEnd+0x1cc>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0adb      	lsrs	r3, r3, #11
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
	elapsedTime %= 60;
 8001780:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <gameEnd+0x1c8>)
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <gameEnd+0x1d0>)
 8001786:	fba3 2301 	umull	r2, r3, r3, r1
 800178a:	095a      	lsrs	r2, r3, #5
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	1aca      	subs	r2, r1, r3
 8001796:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <gameEnd+0x1c8>)
 8001798:	601a      	str	r2, [r3, #0]
	uint32_t minutes = elapsedTime / 60;
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <gameEnd+0x1c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a36      	ldr	r2, [pc, #216]	@ (8001878 <gameEnd+0x1d0>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t seconds = elapsedTime % 60;
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <gameEnd+0x1c8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <gameEnd+0x1d0>)
 80017ae:	fba3 1302 	umull	r1, r3, r3, r2
 80017b2:	0959      	lsrs	r1, r3, #5
 80017b4:	460b      	mov	r3, r1
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	1a5b      	subs	r3, r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	623b      	str	r3, [r7, #32]

	char Hrs[] = {'X','X'};
 80017c0:	f645 0358 	movw	r3, #22616	@ 0x5858
 80017c4:	81bb      	strh	r3, [r7, #12]
	char Mins[] = {'X','X'};
 80017c6:	f645 0358 	movw	r3, #22616	@ 0x5858
 80017ca:	813b      	strh	r3, [r7, #8]
	char Secs[] = {'X','X'};
 80017cc:	f645 0358 	movw	r3, #22616	@ 0x5858
 80017d0:	80bb      	strh	r3, [r7, #4]

	itoa(hours, Hrs, 10);
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	f107 010c 	add.w	r1, r7, #12
 80017d8:	220a      	movs	r2, #10
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 fd58 	bl	8006290 <itoa>
	itoa(minutes, Mins, 10);
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	f107 0108 	add.w	r1, r7, #8
 80017e6:	220a      	movs	r2, #10
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fd51 	bl	8006290 <itoa>
	itoa(seconds, Secs, 10);
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	1d39      	adds	r1, r7, #4
 80017f2:	220a      	movs	r2, #10
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fd4b 	bl	8006290 <itoa>

	LCD_DisplayChar(65,115,'0');
 80017fa:	2230      	movs	r2, #48	@ 0x30
 80017fc:	2173      	movs	r1, #115	@ 0x73
 80017fe:	2041      	movs	r0, #65	@ 0x41
 8001800:	f7ff fa02 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(80,115,Hrs[0]);
 8001804:	7b3b      	ldrb	r3, [r7, #12]
 8001806:	461a      	mov	r2, r3
 8001808:	2173      	movs	r1, #115	@ 0x73
 800180a:	2050      	movs	r0, #80	@ 0x50
 800180c:	f7ff f9fc 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(92,115,':');
 8001810:	223a      	movs	r2, #58	@ 0x3a
 8001812:	2173      	movs	r1, #115	@ 0x73
 8001814:	205c      	movs	r0, #92	@ 0x5c
 8001816:	f7ff f9f7 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(105,115,'0');
 800181a:	2230      	movs	r2, #48	@ 0x30
 800181c:	2173      	movs	r1, #115	@ 0x73
 800181e:	2069      	movs	r0, #105	@ 0x69
 8001820:	f7ff f9f2 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(120,115,Mins[0]);
 8001824:	7a3b      	ldrb	r3, [r7, #8]
 8001826:	461a      	mov	r2, r3
 8001828:	2173      	movs	r1, #115	@ 0x73
 800182a:	2078      	movs	r0, #120	@ 0x78
 800182c:	f7ff f9ec 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(132,115,':');
 8001830:	223a      	movs	r2, #58	@ 0x3a
 8001832:	2173      	movs	r1, #115	@ 0x73
 8001834:	2084      	movs	r0, #132	@ 0x84
 8001836:	f7ff f9e7 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(142,115,Secs[0]);
 800183a:	793b      	ldrb	r3, [r7, #4]
 800183c:	461a      	mov	r2, r3
 800183e:	2173      	movs	r1, #115	@ 0x73
 8001840:	208e      	movs	r0, #142	@ 0x8e
 8001842:	f7ff f9e1 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(157,115,Secs[1]);
 8001846:	797b      	ldrb	r3, [r7, #5]
 8001848:	461a      	mov	r2, r3
 800184a:	2173      	movs	r1, #115	@ 0x73
 800184c:	209d      	movs	r0, #157	@ 0x9d
 800184e:	f7ff f9db 	bl	8000c08 <LCD_DisplayChar>
	LCD_DisplayChar(167,115,'s');
 8001852:	2273      	movs	r2, #115	@ 0x73
 8001854:	2173      	movs	r1, #115	@ 0x73
 8001856:	20a7      	movs	r0, #167	@ 0xa7
 8001858:	f7ff f9d6 	bl	8000c08 <LCD_DisplayChar>
}
 800185c:	bf00      	nop
 800185e:	3734      	adds	r7, #52	@ 0x34
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	20000138 	.word	0x20000138
 8001868:	08006838 	.word	0x08006838
 800186c:	08006848 	.word	0x08006848
 8001870:	20025af8 	.word	0x20025af8
 8001874:	91a2b3c5 	.word	0x91a2b3c5
 8001878:	88888889 	.word	0x88888889

0800187c <gameScreen>:
void gameScreen(void){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b08d      	sub	sp, #52	@ 0x34
 8001880:	af04      	add	r7, sp, #16


	LCD_Clear(0, LCD_COLOR_WHITE);
 8001882:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff f90e 	bl	8000aa8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff f92d 	bl	8000aec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001892:	484d      	ldr	r0, [pc, #308]	@ (80019c8 <gameScreen+0x14c>)
 8001894:	f7ff f93a 	bl	8000b0c <LCD_SetFont>
	LCD_Draw_Horizontal_Line(0, 312, 239, LCD_COLOR_BLACK);
 8001898:	2300      	movs	r3, #0
 800189a:	22ef      	movs	r2, #239	@ 0xef
 800189c:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff f8da 	bl	8000a5a <LCD_Draw_Horizontal_Line>

	HAL_Delay(100);
 80018a6:	2064      	movs	r0, #100	@ 0x64
 80018a8:	f001 fa26 	bl	8002cf8 <HAL_Delay>

	while(gameRunning){
 80018ac:	e080      	b.n	80019b0 <gameScreen+0x134>

		checkTop();
 80018ae:	f7ff fedb 	bl	8001668 <checkTop>
		currentBlock.x = X_START;
 80018b2:	4b46      	ldr	r3, [pc, #280]	@ (80019cc <gameScreen+0x150>)
 80018b4:	2260      	movs	r2, #96	@ 0x60
 80018b6:	821a      	strh	r2, [r3, #16]
		currentBlock.y = Y_START;
 80018b8:	4b44      	ldr	r3, [pc, #272]	@ (80019cc <gameScreen+0x150>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	825a      	strh	r2, [r3, #18]
		currentBlock.lineColor = LCD_COLOR_BLACK;
 80018be:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <gameScreen+0x150>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	829a      	strh	r2, [r3, #20]
		currentBlock.rotation = ZERO_DEGREES;
 80018c4:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <gameScreen+0x150>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	831a      	strh	r2, [r3, #24]
		GenerateRandomBlock(&currentBlock);
 80018ca:	4840      	ldr	r0, [pc, #256]	@ (80019cc <gameScreen+0x150>)
 80018cc:	f7ff faa6 	bl	8000e1c <GenerateRandomBlock>
		drawTetrisShape(&currentBlock);
 80018d0:	483e      	ldr	r0, [pc, #248]	@ (80019cc <gameScreen+0x150>)
 80018d2:	f7ff fafb 	bl	8000ecc <drawTetrisShape>
		startTime = HAL_GetTick();
 80018d6:	f001 fa03 	bl	8002ce0 <HAL_GetTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a3c      	ldr	r2, [pc, #240]	@ (80019d0 <gameScreen+0x154>)
 80018de:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 80018e0:	2064      	movs	r0, #100	@ 0x64
 80018e2:	f001 fa09 	bl	8002cf8 <HAL_Delay>


		while(isValidMove(&currentBlock) == true){
 80018e6:	e02a      	b.n	800193e <gameScreen+0xc2>

			HAL_Delay(500);
 80018e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018ec:	f001 fa04 	bl	8002cf8 <HAL_Delay>
			dropBlock();
 80018f0:	f7ff fbd2 	bl	8001098 <dropBlock>

			if(getScheduledEvents() & ROTATION_EVENT){
 80018f4:	f7ff fa30 	bl	8000d58 <getScheduledEvents>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <gameScreen+0x90>

				Rotate90();
 8001902:	f7ff fb4b 	bl	8000f9c <Rotate90>
				removeSchedulerEvent(ROTATION_EVENT);
 8001906:	2010      	movs	r0, #16
 8001908:	f7ff fa12 	bl	8000d30 <removeSchedulerEvent>
			}
			if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed){
 800190c:	4831      	ldr	r0, [pc, #196]	@ (80019d4 <gameScreen+0x158>)
 800190e:	f7ff f9ae 	bl	8000c6e <returnTouchStateAndLocation>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <gameScreen+0xc2>

						if(StaticTouchData.x < 120){
 8001918:	4b2e      	ldr	r3, [pc, #184]	@ (80019d4 <gameScreen+0x158>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	2b77      	cmp	r3, #119	@ 0x77
 800191e:	d805      	bhi.n	800192c <gameScreen+0xb0>
							HAL_Delay(100);
 8001920:	2064      	movs	r0, #100	@ 0x64
 8001922:	f001 f9e9 	bl	8002cf8 <HAL_Delay>
							moveRight();
 8001926:	f7ff fc45 	bl	80011b4 <moveRight>
 800192a:	e008      	b.n	800193e <gameScreen+0xc2>
						}
						else if(StaticTouchData.x > 120){
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <gameScreen+0x158>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	2b78      	cmp	r3, #120	@ 0x78
 8001932:	d904      	bls.n	800193e <gameScreen+0xc2>
							HAL_Delay(100);
 8001934:	2064      	movs	r0, #100	@ 0x64
 8001936:	f001 f9df 	bl	8002cf8 <HAL_Delay>
							moveLeft();
 800193a:	f7ff fbd3 	bl	80010e4 <moveLeft>
		while(isValidMove(&currentBlock) == true){
 800193e:	4823      	ldr	r0, [pc, #140]	@ (80019cc <gameScreen+0x150>)
 8001940:	f7ff fca0 	bl	8001284 <isValidMove>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ce      	bne.n	80018e8 <gameScreen+0x6c>




		}
		endTime = HAL_GetTick();
 800194a:	f001 f9c9 	bl	8002ce0 <HAL_GetTick>
 800194e:	4603      	mov	r3, r0
 8001950:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <gameScreen+0x15c>)
 8001952:	6013      	str	r3, [r2, #0]
		elapsedTime += (endTime - startTime) / 1000;
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <gameScreen+0x15c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <gameScreen+0x154>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <gameScreen+0x160>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	099a      	lsrs	r2, r3, #6
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <gameScreen+0x164>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <gameScreen+0x164>)
 800196e:	6013      	str	r3, [r2, #0]
		startTime = 0;
 8001970:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <gameScreen+0x154>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
		endTime = 0;
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <gameScreen+0x15c>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
		Block_RegDef_t newBlock;
		BlockInit(&newBlock, currentBlock.Shape, currentBlock.x, currentBlock.y, currentBlock.color, LCD_COLOR_BLACK, currentBlock.height);
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <gameScreen+0x150>)
 800197e:	8a19      	ldrh	r1, [r3, #16]
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <gameScreen+0x150>)
 8001982:	8a5c      	ldrh	r4, [r3, #18]
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <gameScreen+0x150>)
 8001986:	8adb      	ldrh	r3, [r3, #22]
 8001988:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <gameScreen+0x150>)
 800198a:	7e92      	ldrb	r2, [r2, #26]
 800198c:	1d38      	adds	r0, r7, #4
 800198e:	9202      	str	r2, [sp, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	9201      	str	r2, [sp, #4]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	4623      	mov	r3, r4
 8001998:	460a      	mov	r2, r1
 800199a:	490c      	ldr	r1, [pc, #48]	@ (80019cc <gameScreen+0x150>)
 800199c:	f7ff f9e8 	bl	8000d70 <BlockInit>
		drawTetrisShape(&newBlock);
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa92 	bl	8000ecc <drawTetrisShape>
		updateBoard(&newBlock);
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fd22 	bl	80013f4 <updateBoard>
	while(gameRunning){
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <gameScreen+0x168>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f af7a 	bne.w	80018ae <gameScreen+0x32>
//			printf("%d",tetrisBoard[i][j]);
//		}
//
//	}

	gameEnd();
 80019ba:	f7ff fe75 	bl	80016a8 <gameEnd>
}
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	@ 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000138 	.word	0x20000138
 80019cc:	20025acc 	.word	0x20025acc
 80019d0:	20025af0 	.word	0x20025af0
 80019d4:	20025ae8 	.word	0x20025ae8
 80019d8:	20025af4 	.word	0x20025af4
 80019dc:	10624dd3 	.word	0x10624dd3
 80019e0:	20025af8 	.word	0x20025af8
 80019e4:	20000002 	.word	0x20000002

080019e8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019ec:	f000 f9fe 	bl	8001dec <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80019f0:	20ca      	movs	r0, #202	@ 0xca
 80019f2:	f000 f943 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80019f6:	20c3      	movs	r0, #195	@ 0xc3
 80019f8:	f000 f94d 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80019fc:	2008      	movs	r0, #8
 80019fe:	f000 f94a 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001a02:	2050      	movs	r0, #80	@ 0x50
 8001a04:	f000 f947 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001a08:	20cf      	movs	r0, #207	@ 0xcf
 8001a0a:	f000 f937 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f941 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001a14:	20c1      	movs	r0, #193	@ 0xc1
 8001a16:	f000 f93e 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001a1a:	2030      	movs	r0, #48	@ 0x30
 8001a1c:	f000 f93b 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001a20:	20ed      	movs	r0, #237	@ 0xed
 8001a22:	f000 f92b 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001a26:	2064      	movs	r0, #100	@ 0x64
 8001a28:	f000 f935 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f932 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001a32:	2012      	movs	r0, #18
 8001a34:	f000 f92f 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001a38:	2081      	movs	r0, #129	@ 0x81
 8001a3a:	f000 f92c 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001a3e:	20e8      	movs	r0, #232	@ 0xe8
 8001a40:	f000 f91c 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001a44:	2085      	movs	r0, #133	@ 0x85
 8001a46:	f000 f926 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f923 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a50:	2078      	movs	r0, #120	@ 0x78
 8001a52:	f000 f920 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001a56:	20cb      	movs	r0, #203	@ 0xcb
 8001a58:	f000 f910 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001a5c:	2039      	movs	r0, #57	@ 0x39
 8001a5e:	f000 f91a 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001a62:	202c      	movs	r0, #44	@ 0x2c
 8001a64:	f000 f917 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f914 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001a6e:	2034      	movs	r0, #52	@ 0x34
 8001a70:	f000 f911 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001a74:	2002      	movs	r0, #2
 8001a76:	f000 f90e 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001a7a:	20f7      	movs	r0, #247	@ 0xf7
 8001a7c:	f000 f8fe 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001a80:	2020      	movs	r0, #32
 8001a82:	f000 f908 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001a86:	20ea      	movs	r0, #234	@ 0xea
 8001a88:	f000 f8f8 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f000 f902 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f8ff 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001a98:	20b1      	movs	r0, #177	@ 0xb1
 8001a9a:	f000 f8ef 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f8f9 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001aa4:	201b      	movs	r0, #27
 8001aa6:	f000 f8f6 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001aaa:	20b6      	movs	r0, #182	@ 0xb6
 8001aac:	f000 f8e6 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f000 f8f0 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001ab6:	20a2      	movs	r0, #162	@ 0xa2
 8001ab8:	f000 f8ed 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001abc:	20c0      	movs	r0, #192	@ 0xc0
 8001abe:	f000 f8dd 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ac2:	2010      	movs	r0, #16
 8001ac4:	f000 f8e7 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ac8:	20c1      	movs	r0, #193	@ 0xc1
 8001aca:	f000 f8d7 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ace:	2010      	movs	r0, #16
 8001ad0:	f000 f8e1 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ad4:	20c5      	movs	r0, #197	@ 0xc5
 8001ad6:	f000 f8d1 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ada:	2045      	movs	r0, #69	@ 0x45
 8001adc:	f000 f8db 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ae0:	2015      	movs	r0, #21
 8001ae2:	f000 f8d8 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ae6:	20c7      	movs	r0, #199	@ 0xc7
 8001ae8:	f000 f8c8 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001aec:	2090      	movs	r0, #144	@ 0x90
 8001aee:	f000 f8d2 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001af2:	2036      	movs	r0, #54	@ 0x36
 8001af4:	f000 f8c2 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001af8:	20c8      	movs	r0, #200	@ 0xc8
 8001afa:	f000 f8cc 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001afe:	20f2      	movs	r0, #242	@ 0xf2
 8001b00:	f000 f8bc 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f8c6 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001b0a:	20b0      	movs	r0, #176	@ 0xb0
 8001b0c:	f000 f8b6 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001b10:	20c2      	movs	r0, #194	@ 0xc2
 8001b12:	f000 f8c0 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001b16:	20b6      	movs	r0, #182	@ 0xb6
 8001b18:	f000 f8b0 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f000 f8ba 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001b22:	20a7      	movs	r0, #167	@ 0xa7
 8001b24:	f000 f8b7 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001b28:	2027      	movs	r0, #39	@ 0x27
 8001b2a:	f000 f8b4 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b2e:	2004      	movs	r0, #4
 8001b30:	f000 f8b1 	bl	8001c96 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001b34:	202a      	movs	r0, #42	@ 0x2a
 8001b36:	f000 f8a1 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f8ab 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f8a8 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f8a5 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001b4c:	20ef      	movs	r0, #239	@ 0xef
 8001b4e:	f000 f8a2 	bl	8001c96 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001b52:	202b      	movs	r0, #43	@ 0x2b
 8001b54:	f000 f892 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 f89c 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 f899 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f000 f896 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001b6a:	203f      	movs	r0, #63	@ 0x3f
 8001b6c:	f000 f893 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001b70:	20f6      	movs	r0, #246	@ 0xf6
 8001b72:	f000 f883 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 f88d 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 f88a 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001b82:	2006      	movs	r0, #6
 8001b84:	f000 f887 	bl	8001c96 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001b88:	202c      	movs	r0, #44	@ 0x2c
 8001b8a:	f000 f877 	bl	8001c7c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b8e:	20c8      	movs	r0, #200	@ 0xc8
 8001b90:	f000 f9e8 	bl	8001f64 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001b94:	2026      	movs	r0, #38	@ 0x26
 8001b96:	f000 f871 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 f87b 	bl	8001c96 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001ba0:	20e0      	movs	r0, #224	@ 0xe0
 8001ba2:	f000 f86b 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f000 f875 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001bac:	2029      	movs	r0, #41	@ 0x29
 8001bae:	f000 f872 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001bb2:	2024      	movs	r0, #36	@ 0x24
 8001bb4:	f000 f86f 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001bb8:	200c      	movs	r0, #12
 8001bba:	f000 f86c 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001bbe:	200e      	movs	r0, #14
 8001bc0:	f000 f869 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001bc4:	2009      	movs	r0, #9
 8001bc6:	f000 f866 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001bca:	204e      	movs	r0, #78	@ 0x4e
 8001bcc:	f000 f863 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001bd0:	2078      	movs	r0, #120	@ 0x78
 8001bd2:	f000 f860 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001bd6:	203c      	movs	r0, #60	@ 0x3c
 8001bd8:	f000 f85d 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001bdc:	2009      	movs	r0, #9
 8001bde:	f000 f85a 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001be2:	2013      	movs	r0, #19
 8001be4:	f000 f857 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001be8:	2005      	movs	r0, #5
 8001bea:	f000 f854 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001bee:	2017      	movs	r0, #23
 8001bf0:	f000 f851 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001bf4:	2011      	movs	r0, #17
 8001bf6:	f000 f84e 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f84b 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001c00:	20e1      	movs	r0, #225	@ 0xe1
 8001c02:	f000 f83b 	bl	8001c7c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f845 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001c0c:	2016      	movs	r0, #22
 8001c0e:	f000 f842 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c12:	201b      	movs	r0, #27
 8001c14:	f000 f83f 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f000 f83c 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c1e:	2011      	movs	r0, #17
 8001c20:	f000 f839 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001c24:	2007      	movs	r0, #7
 8001c26:	f000 f836 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001c2a:	2031      	movs	r0, #49	@ 0x31
 8001c2c:	f000 f833 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001c30:	2033      	movs	r0, #51	@ 0x33
 8001c32:	f000 f830 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001c36:	2042      	movs	r0, #66	@ 0x42
 8001c38:	f000 f82d 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c3c:	2005      	movs	r0, #5
 8001c3e:	f000 f82a 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c42:	200c      	movs	r0, #12
 8001c44:	f000 f827 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f000 f824 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001c4e:	2028      	movs	r0, #40	@ 0x28
 8001c50:	f000 f821 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001c54:	202f      	movs	r0, #47	@ 0x2f
 8001c56:	f000 f81e 	bl	8001c96 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	f000 f81b 	bl	8001c96 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001c60:	2011      	movs	r0, #17
 8001c62:	f000 f80b 	bl	8001c7c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001c66:	20c8      	movs	r0, #200	@ 0xc8
 8001c68:	f000 f97c 	bl	8001f64 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001c6c:	2029      	movs	r0, #41	@ 0x29
 8001c6e:	f000 f805 	bl	8001c7c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001c72:	202c      	movs	r0, #44	@ 0x2c
 8001c74:	f000 f802 	bl	8001c7c <ili9341_Write_Reg>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f949 	bl	8001f20 <LCD_IO_WriteReg>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f91a 	bl	8001edc <LCD_IO_WriteData>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001cb4:	4819      	ldr	r0, [pc, #100]	@ (8001d1c <SPI_Init+0x6c>)
 8001cb6:	f003 ff7e 	bl	8005bb6 <HAL_SPI_GetState>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12b      	bne.n	8001d18 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <SPI_Init+0x6c>)
 8001cc2:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <SPI_Init+0x70>)
 8001cc4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <SPI_Init+0x6c>)
 8001cc8:	2218      	movs	r2, #24
 8001cca:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ccc:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <SPI_Init+0x6c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <SPI_Init+0x6c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <SPI_Init+0x6c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <SPI_Init+0x6c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <SPI_Init+0x6c>)
 8001ce6:	2207      	movs	r2, #7
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <SPI_Init+0x6c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <SPI_Init+0x6c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <SPI_Init+0x6c>)
 8001cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <SPI_Init+0x6c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <SPI_Init+0x6c>)
 8001d06:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d0a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <SPI_Init+0x6c>)
 8001d0e:	f000 f833 	bl	8001d78 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d12:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <SPI_Init+0x6c>)
 8001d14:	f003 fd5a 	bl	80057cc <HAL_SPI_Init>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20025afc 	.word	0x20025afc
 8001d20:	40015000 	.word	0x40015000

08001d24 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <SPI_Write+0x34>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1db9      	adds	r1, r7, #6
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4808      	ldr	r0, [pc, #32]	@ (8001d5c <SPI_Write+0x38>)
 8001d3c:	f003 fdf7 	bl	800592e <HAL_SPI_Transmit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001d4a:	f000 f809 	bl	8001d60 <SPI_Error>
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000140 	.word	0x20000140
 8001d5c:	20025afc 	.word	0x20025afc

08001d60 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001d64:	4803      	ldr	r0, [pc, #12]	@ (8001d74 <SPI_Error+0x14>)
 8001d66:	f003 fdba 	bl	80058de <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001d6a:	f7ff ffa1 	bl	8001cb0 <SPI_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20025afc 	.word	0x20025afc

08001d78 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	4a16      	ldr	r2, [pc, #88]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dac:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <SPI_MspInit+0x6c>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001db8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001dca:	2305      	movs	r3, #5
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <SPI_MspInit+0x70>)
 8001dd6:	f001 f899 	bl	8002f0c <HAL_GPIO_Init>
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40021400 	.word	0x40021400

08001dec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001df2:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <LCD_IO_Init+0xe0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d164      	bne.n	8001ec4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001dfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <LCD_IO_Init+0xe0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	4a31      	ldr	r2, [pc, #196]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e10:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4619      	mov	r1, r3
 8001e34:	4827      	ldr	r0, [pc, #156]	@ (8001ed4 <LCD_IO_Init+0xe8>)
 8001e36:	f001 f869 	bl	8002f0c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a23      	ldr	r2, [pc, #140]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4819      	ldr	r0, [pc, #100]	@ (8001ed4 <LCD_IO_Init+0xe8>)
 8001e70:	f001 f84c 	bl	8002f0c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <LCD_IO_Init+0xe4>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001e90:	2304      	movs	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <LCD_IO_Init+0xec>)
 8001ea8:	f001 f830 	bl	8002f0c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001eac:	2200      	movs	r2, #0
 8001eae:	2104      	movs	r1, #4
 8001eb0:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <LCD_IO_Init+0xec>)
 8001eb2:	f001 fae3 	bl	800347c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <LCD_IO_Init+0xec>)
 8001ebc:	f001 fade 	bl	800347c <HAL_GPIO_WritePin>

    SPI_Init();
 8001ec0:	f7ff fef6 	bl	8001cb0 <SPI_Init>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20025b54 	.word	0x20025b54
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020800 	.word	0x40020800

08001edc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <LCD_IO_WriteData+0x3c>)
 8001eee:	f001 fac5 	bl	800347c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <LCD_IO_WriteData+0x40>)
 8001ef8:	f001 fac0 	bl	800347c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff10 	bl	8001d24 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f04:	2201      	movs	r2, #1
 8001f06:	2104      	movs	r1, #4
 8001f08:	4804      	ldr	r0, [pc, #16]	@ (8001f1c <LCD_IO_WriteData+0x40>)
 8001f0a:	f001 fab7 	bl	800347c <HAL_GPIO_WritePin>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40020800 	.word	0x40020800

08001f20 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f30:	480a      	ldr	r0, [pc, #40]	@ (8001f5c <LCD_IO_WriteReg+0x3c>)
 8001f32:	f001 faa3 	bl	800347c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f36:	2200      	movs	r2, #0
 8001f38:	2104      	movs	r1, #4
 8001f3a:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <LCD_IO_WriteReg+0x40>)
 8001f3c:	f001 fa9e 	bl	800347c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff feed 	bl	8001d24 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4804      	ldr	r0, [pc, #16]	@ (8001f60 <LCD_IO_WriteReg+0x40>)
 8001f50:	f001 fa94 	bl	800347c <HAL_GPIO_WritePin>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	40020800 	.word	0x40020800

08001f64 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fec3 	bl	8002cf8 <HAL_Delay>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f000 fe49 	bl	8002c14 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8001f82:	f000 f80b 	bl	8001f9c <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001f86:	f7fe fb0b 	bl	80005a0 <ApplicationInit>

//LCD_Visual_Demo();
  LCD_Main_Menu();
 8001f8a:	f7fe fb25 	bl	80005d8 <LCD_Main_Menu>
  HAL_Delay(5000);
 8001f8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f92:	f000 feb1 	bl	8002cf8 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <main+0x1c>
	...

08001f9c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b092      	sub	sp, #72	@ 0x48
 8001fa0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <SystemClockOverride+0x7c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a1b      	ldr	r2, [pc, #108]	@ (8002018 <SystemClockOverride+0x7c>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <SystemClockOverride+0x7c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fcc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fd2:	2308      	movs	r3, #8
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fd6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f002 fd2c 	bl	8004a44 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001fec:	230f      	movs	r3, #15
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002004:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002008:	2105      	movs	r1, #5
 800200a:	4618      	mov	r0, r3
 800200c:	f002 ff92 	bl	8004f34 <HAL_RCC_ClockConfig>
}
 8002010:	bf00      	nop
 8002012:	3748      	adds	r7, #72	@ 0x48
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <Error_Handler+0x8>

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_MspInit+0x4c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a0f      	ldr	r2, [pc, #60]	@ (8002074 <HAL_MspInit+0x4c>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_MspInit+0x4c>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002066:	2007      	movs	r0, #7
 8002068:	f000 ff1c 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a29      	ldr	r2, [pc, #164]	@ (800213c <HAL_I2C_MspInit+0xc4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d14b      	bne.n	8002132 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80020d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d8:	2312      	movs	r3, #18
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020e4:	2304      	movs	r3, #4
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	4815      	ldr	r0, [pc, #84]	@ (8002144 <HAL_I2C_MspInit+0xcc>)
 80020f0:	f000 ff0c 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80020f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	2312      	movs	r3, #18
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002106:	2304      	movs	r3, #4
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <HAL_I2C_MspInit+0xd0>)
 8002112:	f000 fefb 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 8002120:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002124:	6413      	str	r3, [r2, #64]	@ 0x40
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_I2C_MspInit+0xc8>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	@ 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40005c00 	.word	0x40005c00
 8002140:	40023800 	.word	0x40023800
 8002144:	40020800 	.word	0x40020800
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b09a      	sub	sp, #104	@ 0x68
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002168:	2230      	movs	r2, #48	@ 0x30
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f004 f9d8 	bl	8006522 <memset>
  if(hltdc->Instance==LTDC)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a81      	ldr	r2, [pc, #516]	@ (800237c <HAL_LTDC_MspInit+0x230>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f040 80fa 	bne.w	8002372 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800217e:	2308      	movs	r3, #8
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002182:	2332      	movs	r3, #50	@ 0x32
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002186:	2302      	movs	r3, #2
 8002188:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800218a:	2300      	movs	r3, #0
 800218c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002192:	4618      	mov	r0, r3
 8002194:	f003 f8da 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800219e:	f7ff ff3d 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
 80021a6:	4b76      	ldr	r3, [pc, #472]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	4a75      	ldr	r2, [pc, #468]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b2:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a67      	ldr	r2, [pc, #412]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a60      	ldr	r2, [pc, #384]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b5e      	ldr	r3, [pc, #376]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b5a      	ldr	r3, [pc, #360]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a59      	ldr	r2, [pc, #356]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 800221c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a4b      	ldr	r2, [pc, #300]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b49      	ldr	r3, [pc, #292]	@ (8002380 <HAL_LTDC_MspInit+0x234>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	2300      	movs	r3, #0
 8002276:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002278:	230e      	movs	r3, #14
 800227a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002280:	4619      	mov	r1, r3
 8002282:	4840      	ldr	r0, [pc, #256]	@ (8002384 <HAL_LTDC_MspInit+0x238>)
 8002284:	f000 fe42 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002288:	f641 0358 	movw	r3, #6232	@ 0x1858
 800228c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800229a:	230e      	movs	r3, #14
 800229c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a2:	4619      	mov	r1, r3
 80022a4:	4838      	ldr	r0, [pc, #224]	@ (8002388 <HAL_LTDC_MspInit+0x23c>)
 80022a6:	f000 fe31 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80022aa:	2303      	movs	r3, #3
 80022ac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022ba:	2309      	movs	r3, #9
 80022bc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022c2:	4619      	mov	r1, r3
 80022c4:	4831      	ldr	r0, [pc, #196]	@ (800238c <HAL_LTDC_MspInit+0x240>)
 80022c6:	f000 fe21 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80022ca:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80022ce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022dc:	230e      	movs	r3, #14
 80022de:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022e4:	4619      	mov	r1, r3
 80022e6:	4829      	ldr	r0, [pc, #164]	@ (800238c <HAL_LTDC_MspInit+0x240>)
 80022e8:	f000 fe10 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80022ec:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80022f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022fe:	230e      	movs	r3, #14
 8002300:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002302:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002306:	4619      	mov	r1, r3
 8002308:	4821      	ldr	r0, [pc, #132]	@ (8002390 <HAL_LTDC_MspInit+0x244>)
 800230a:	f000 fdff 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800230e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002312:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002320:	230e      	movs	r3, #14
 8002322:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002324:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002328:	4619      	mov	r1, r3
 800232a:	481a      	ldr	r0, [pc, #104]	@ (8002394 <HAL_LTDC_MspInit+0x248>)
 800232c:	f000 fdee 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002330:	2348      	movs	r3, #72	@ 0x48
 8002332:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002340:	230e      	movs	r3, #14
 8002342:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002344:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002348:	4619      	mov	r1, r3
 800234a:	4813      	ldr	r0, [pc, #76]	@ (8002398 <HAL_LTDC_MspInit+0x24c>)
 800234c:	f000 fdde 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002350:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002354:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002362:	2309      	movs	r3, #9
 8002364:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002366:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800236a:	4619      	mov	r1, r3
 800236c:	4808      	ldr	r0, [pc, #32]	@ (8002390 <HAL_LTDC_MspInit+0x244>)
 800236e:	f000 fdcd 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002372:	bf00      	nop
 8002374:	3768      	adds	r7, #104	@ 0x68
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40016800 	.word	0x40016800
 8002380:	40023800 	.word	0x40023800
 8002384:	40021400 	.word	0x40021400
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40021800 	.word	0x40021800
 8002394:	40020800 	.word	0x40020800
 8002398:	40020c00 	.word	0x40020c00

0800239c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0b      	ldr	r2, [pc, #44]	@ (80023d8 <HAL_RNG_MspInit+0x3c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10d      	bne.n	80023ca <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <HAL_RNG_MspInit+0x40>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	4a09      	ldr	r2, [pc, #36]	@ (80023dc <HAL_RNG_MspInit+0x40>)
 80023b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80023be:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <HAL_RNG_MspInit+0x40>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	50060800 	.word	0x50060800
 80023dc:	40023800 	.word	0x40023800

080023e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	@ 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	@ (8002464 <HAL_SPI_MspInit+0x84>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d12c      	bne.n	800245c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a17      	ldr	r2, [pc, #92]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 800240c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 8002428:	f043 0320 	orr.w	r3, r3, #32
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_SPI_MspInit+0x88>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800243a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800244c:	2305      	movs	r3, #5
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4805      	ldr	r0, [pc, #20]	@ (800246c <HAL_SPI_MspInit+0x8c>)
 8002458:	f000 fd58 	bl	8002f0c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40015000 	.word	0x40015000
 8002468:	40023800 	.word	0x40023800
 800246c:	40021400 	.word	0x40021400

08002470 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_SPI_MspDeInit+0x30>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10a      	bne.n	8002498 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <HAL_SPI_MspDeInit+0x34>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	4a07      	ldr	r2, [pc, #28]	@ (80024a4 <HAL_SPI_MspDeInit+0x34>)
 8002488:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800248c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800248e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <HAL_SPI_MspDeInit+0x38>)
 8002494:	f000 fee6 	bl	8003264 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40015000 	.word	0x40015000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40021400 	.word	0x40021400

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <NMI_Handler+0x4>

080024b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <MemManage_Handler+0x4>

080024c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <BusFault_Handler+0x4>

080024cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <UsageFault_Handler+0x4>

080024d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 fbd9 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}

0800250a <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002510:	f000 f9ce 	bl	80028b0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002514:	f000 f98e 	bl	8002834 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002518:	2202      	movs	r2, #2
 800251a:	2103      	movs	r1, #3
 800251c:	2082      	movs	r0, #130	@ 0x82
 800251e:	f000 fa1b 	bl	8002958 <I2C3_Write>
    HAL_Delay(5);
 8002522:	2005      	movs	r0, #5
 8002524:	f000 fbe8 	bl	8002cf8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002528:	2200      	movs	r2, #0
 800252a:	2103      	movs	r1, #3
 800252c:	2082      	movs	r0, #130	@ 0x82
 800252e:	f000 fa13 	bl	8002958 <I2C3_Write>
    HAL_Delay(2);
 8002532:	2002      	movs	r0, #2
 8002534:	f000 fbe0 	bl	8002cf8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002538:	1cba      	adds	r2, r7, #2
 800253a:	2302      	movs	r3, #2
 800253c:	2100      	movs	r1, #0
 800253e:	2082      	movs	r0, #130	@ 0x82
 8002540:	f000 fa5a 	bl	80029f8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800254a:	887b      	ldrh	r3, [r7, #2]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29a      	uxth	r2, r3
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	4313      	orrs	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f640 0211 	movw	r2, #2065	@ 0x811
 800255c:	4293      	cmp	r3, r2
 800255e:	d001      	beq.n	8002564 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002560:	2303      	movs	r3, #3
 8002562:	e075      	b.n	8002650 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002564:	2202      	movs	r2, #2
 8002566:	2103      	movs	r1, #3
 8002568:	2082      	movs	r0, #130	@ 0x82
 800256a:	f000 f9f5 	bl	8002958 <I2C3_Write>
    HAL_Delay(5);
 800256e:	2005      	movs	r0, #5
 8002570:	f000 fbc2 	bl	8002cf8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002574:	2200      	movs	r2, #0
 8002576:	2103      	movs	r1, #3
 8002578:	2082      	movs	r0, #130	@ 0x82
 800257a:	f000 f9ed 	bl	8002958 <I2C3_Write>
    HAL_Delay(2);
 800257e:	2002      	movs	r0, #2
 8002580:	f000 fbba 	bl	8002cf8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002584:	2004      	movs	r0, #4
 8002586:	f000 f867 	bl	8002658 <STMPE811_Read>
 800258a:	4603      	mov	r3, r0
 800258c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800258e:	797b      	ldrb	r3, [r7, #5]
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002596:	797b      	ldrb	r3, [r7, #5]
 8002598:	461a      	mov	r2, r3
 800259a:	2104      	movs	r1, #4
 800259c:	2082      	movs	r0, #130	@ 0x82
 800259e:	f000 f9db 	bl	8002958 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80025a2:	2004      	movs	r0, #4
 80025a4:	f000 f858 	bl	8002658 <STMPE811_Read>
 80025a8:	4603      	mov	r3, r0
 80025aa:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	f023 0302 	bic.w	r3, r3, #2
 80025b2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80025b4:	797b      	ldrb	r3, [r7, #5]
 80025b6:	461a      	mov	r2, r3
 80025b8:	2104      	movs	r1, #4
 80025ba:	2082      	movs	r0, #130	@ 0x82
 80025bc:	f000 f9cc 	bl	8002958 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80025c0:	2249      	movs	r2, #73	@ 0x49
 80025c2:	2120      	movs	r1, #32
 80025c4:	2082      	movs	r0, #130	@ 0x82
 80025c6:	f000 f9c7 	bl	8002958 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80025ca:	2002      	movs	r0, #2
 80025cc:	f000 fb94 	bl	8002cf8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80025d0:	2201      	movs	r2, #1
 80025d2:	2121      	movs	r1, #33	@ 0x21
 80025d4:	2082      	movs	r0, #130	@ 0x82
 80025d6:	f000 f9bf 	bl	8002958 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80025da:	2017      	movs	r0, #23
 80025dc:	f000 f83c 	bl	8002658 <STMPE811_Read>
 80025e0:	4603      	mov	r3, r0
 80025e2:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80025e4:	797b      	ldrb	r3, [r7, #5]
 80025e6:	f043 031e 	orr.w	r3, r3, #30
 80025ea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	461a      	mov	r2, r3
 80025f0:	2117      	movs	r1, #23
 80025f2:	2082      	movs	r0, #130	@ 0x82
 80025f4:	f000 f9b0 	bl	8002958 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80025f8:	229a      	movs	r2, #154	@ 0x9a
 80025fa:	2141      	movs	r1, #65	@ 0x41
 80025fc:	2082      	movs	r0, #130	@ 0x82
 80025fe:	f000 f9ab 	bl	8002958 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002602:	2201      	movs	r2, #1
 8002604:	214a      	movs	r1, #74	@ 0x4a
 8002606:	2082      	movs	r0, #130	@ 0x82
 8002608:	f000 f9a6 	bl	8002958 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800260c:	2201      	movs	r2, #1
 800260e:	214b      	movs	r1, #75	@ 0x4b
 8002610:	2082      	movs	r0, #130	@ 0x82
 8002612:	f000 f9a1 	bl	8002958 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002616:	2200      	movs	r2, #0
 8002618:	214b      	movs	r1, #75	@ 0x4b
 800261a:	2082      	movs	r0, #130	@ 0x82
 800261c:	f000 f99c 	bl	8002958 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002620:	2201      	movs	r2, #1
 8002622:	2156      	movs	r1, #86	@ 0x56
 8002624:	2082      	movs	r0, #130	@ 0x82
 8002626:	f000 f997 	bl	8002958 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800262a:	2201      	movs	r2, #1
 800262c:	2158      	movs	r1, #88	@ 0x58
 800262e:	2082      	movs	r0, #130	@ 0x82
 8002630:	f000 f992 	bl	8002958 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002634:	2203      	movs	r2, #3
 8002636:	2140      	movs	r1, #64	@ 0x40
 8002638:	2082      	movs	r0, #130	@ 0x82
 800263a:	f000 f98d 	bl	8002958 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	210b      	movs	r1, #11
 8002642:	2082      	movs	r0, #130	@ 0x82
 8002644:	f000 f988 	bl	8002958 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002648:	20c8      	movs	r0, #200	@ 0xc8
 800264a:	f000 fb55 	bl	8002cf8 <HAL_Delay>

    return STMPE811_State_Ok;
 800264e:	2302      	movs	r3, #2

}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002662:	f107 020f 	add.w	r2, r7, #15
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	4619      	mov	r1, r3
 800266a:	2082      	movs	r0, #130	@ 0x82
 800266c:	f000 f99e 	bl	80029ac <I2C3_Read>

    return readData;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	791a      	ldrb	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800268a:	2040      	movs	r0, #64	@ 0x40
 800268c:	f7ff ffe4 	bl	8002658 <STMPE811_Read>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db0e      	blt.n	80026ba <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80026a2:	2201      	movs	r2, #1
 80026a4:	214b      	movs	r1, #75	@ 0x4b
 80026a6:	2082      	movs	r0, #130	@ 0x82
 80026a8:	f000 f956 	bl	8002958 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80026ac:	2200      	movs	r2, #0
 80026ae:	214b      	movs	r1, #75	@ 0x4b
 80026b0:	2082      	movs	r0, #130	@ 0x82
 80026b2:	f000 f951 	bl	8002958 <I2C3_Write>

        return STMPE811_State_Released;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0a7      	b.n	800280a <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	799b      	ldrb	r3, [r3, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d117      	bne.n	80026f2 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f9b8 	bl	8002a3c <TM_STMPE811_ReadX>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	885b      	ldrh	r3, [r3, #2]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fa0b 	bl	8002af8 <TM_STMPE811_ReadY>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80026e8:	3301      	adds	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	805a      	strh	r2, [r3, #2]
 80026f0:	e048      	b.n	8002784 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	799b      	ldrb	r3, [r3, #6]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d112      	bne.n	8002720 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f99c 	bl	8002a3c <TM_STMPE811_ReadX>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	885b      	ldrh	r3, [r3, #2]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f9f1 	bl	8002af8 <TM_STMPE811_ReadY>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	805a      	strh	r2, [r3, #2]
 800271e:	e031      	b.n	8002784 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	799b      	ldrb	r3, [r3, #6]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d115      	bne.n	8002754 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	885b      	ldrh	r3, [r3, #2]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f985 	bl	8002a3c <TM_STMPE811_ReadX>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f9da 	bl	8002af8 <TM_STMPE811_ReadY>
 8002744:	4603      	mov	r3, r0
 8002746:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800274a:	3301      	adds	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e017      	b.n	8002784 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	799b      	ldrb	r3, [r3, #6]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d113      	bne.n	8002784 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f96b 	bl	8002a3c <TM_STMPE811_ReadX>
 8002766:	4603      	mov	r3, r0
 8002768:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9be 	bl	8002af8 <TM_STMPE811_ReadY>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002784:	2201      	movs	r2, #1
 8002786:	214b      	movs	r1, #75	@ 0x4b
 8002788:	2082      	movs	r0, #130	@ 0x82
 800278a:	f000 f8e5 	bl	8002958 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800278e:	2200      	movs	r2, #0
 8002790:	214b      	movs	r1, #75	@ 0x4b
 8002792:	2082      	movs	r0, #130	@ 0x82
 8002794:	f000 f8e0 	bl	8002958 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	799b      	ldrb	r3, [r3, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <STMPE811_ReadTouch+0x12e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	799b      	ldrb	r3, [r3, #6]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d115      	bne.n	80027d4 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d027      	beq.n	8002800 <STMPE811_ReadTouch+0x186>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	2bee      	cmp	r3, #238	@ 0xee
 80027b6:	d823      	bhi.n	8002800 <STMPE811_ReadTouch+0x186>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	885b      	ldrh	r3, [r3, #2]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01f      	beq.n	8002800 <STMPE811_ReadTouch+0x186>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	885b      	ldrh	r3, [r3, #2]
 80027c4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80027c8:	d81a      	bhi.n	8002800 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e01a      	b.n	800280a <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <STMPE811_ReadTouch+0x188>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80027e4:	d80d      	bhi.n	8002802 <STMPE811_ReadTouch+0x188>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	885b      	ldrh	r3, [r3, #2]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <STMPE811_ReadTouch+0x188>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	885b      	ldrh	r3, [r3, #2]
 80027f2:	2bee      	cmp	r3, #238	@ 0xee
 80027f4:	d805      	bhi.n	8002802 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e004      	b.n	800280a <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002800:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20025bac 	.word	0x20025bac

08002834 <I2C3_Init>:

static void I2C3_Init()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <I2C3_Init+0x6c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <I2C3_Init+0x6c>)
 8002844:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <I2C3_Init+0x6c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002856:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <I2C3_Init+0x70>)
 8002858:	4a13      	ldr	r2, [pc, #76]	@ (80028a8 <I2C3_Init+0x74>)
 800285a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <I2C3_Init+0x70>)
 800285e:	4a13      	ldr	r2, [pc, #76]	@ (80028ac <I2C3_Init+0x78>)
 8002860:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <I2C3_Init+0x70>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002868:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <I2C3_Init+0x70>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800286e:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <I2C3_Init+0x70>)
 8002870:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002874:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <I2C3_Init+0x70>)
 8002878:	2200      	movs	r2, #0
 800287a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <I2C3_Init+0x70>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002882:	4808      	ldr	r0, [pc, #32]	@ (80028a4 <I2C3_Init+0x70>)
 8002884:	f000 fe14 	bl	80034b0 <HAL_I2C_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002892:	bf00      	nop
 8002894:	e7fd      	b.n	8002892 <I2C3_Init+0x5e>
    }
    return;
 8002896:	bf00      	nop
}
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	20025b58 	.word	0x20025b58
 80028a8:	40005c00 	.word	0x40005c00
 80028ac:	000186a0 	.word	0x000186a0

080028b0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <I2C3_MspInit+0x9c>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a1f      	ldr	r2, [pc, #124]	@ (800294c <I2C3_MspInit+0x9c>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <I2C3_MspInit+0x9c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b19      	ldr	r3, [pc, #100]	@ (800294c <I2C3_MspInit+0x9c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a18      	ldr	r2, [pc, #96]	@ (800294c <I2C3_MspInit+0x9c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <I2C3_MspInit+0x9c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80028fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002902:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002904:	2312      	movs	r3, #18
 8002906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002910:	2304      	movs	r3, #4
 8002912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4619      	mov	r1, r3
 800291a:	480d      	ldr	r0, [pc, #52]	@ (8002950 <I2C3_MspInit+0xa0>)
 800291c:	f000 faf6 	bl	8002f0c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002924:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	2312      	movs	r3, #18
 8002928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002932:	2304      	movs	r3, #4
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	@ (8002954 <I2C3_MspInit+0xa4>)
 800293e:	f000 fae5 	bl	8002f0c <HAL_GPIO_Init>
    
}
 8002942:	bf00      	nop
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800
 8002954:	40020000 	.word	0x40020000

08002958 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af04      	add	r7, sp, #16
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	460b      	mov	r3, r1
 8002964:	717b      	strb	r3, [r7, #5]
 8002966:	4613      	mov	r3, r2
 8002968:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800296a:	793b      	ldrb	r3, [r7, #4]
 800296c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800296e:	797b      	ldrb	r3, [r7, #5]
 8002970:	b29a      	uxth	r2, r3
 8002972:	88f9      	ldrh	r1, [r7, #6]
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <I2C3_Write+0x48>)
 8002976:	9302      	str	r3, [sp, #8]
 8002978:	2301      	movs	r3, #1
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	f107 030f 	add.w	r3, r7, #15
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	4807      	ldr	r0, [pc, #28]	@ (80029a4 <I2C3_Write+0x4c>)
 8002986:	f000 fed7 	bl	8003738 <HAL_I2C_Mem_Write>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <I2C3_Write+0x50>)
 8002990:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002992:	f7ff ff3f 	bl	8002814 <verifyHAL_I2C_IS_OKAY>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	0003d090 	.word	0x0003d090
 80029a4:	20025b58 	.word	0x20025b58
 80029a8:	20025bac 	.word	0x20025bac

080029ac <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af04      	add	r7, sp, #16
 80029b2:	4603      	mov	r3, r0
 80029b4:	603a      	str	r2, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
 80029b8:	460b      	mov	r3, r1
 80029ba:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	b299      	uxth	r1, r3
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <I2C3_Read+0x40>)
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	2301      	movs	r3, #1
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	4807      	ldr	r0, [pc, #28]	@ (80029f0 <I2C3_Read+0x44>)
 80029d4:	f000 ffaa 	bl	800392c <HAL_I2C_Mem_Read>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <I2C3_Read+0x48>)
 80029de:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80029e0:	f7ff ff18 	bl	8002814 <verifyHAL_I2C_IS_OKAY>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0003d090 	.word	0x0003d090
 80029f0:	20025b58 	.word	0x20025b58
 80029f4:	20025bac 	.word	0x20025bac

080029f8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af04      	add	r7, sp, #16
 80029fe:	603a      	str	r2, [r7, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	460b      	mov	r3, r1
 8002a08:	71bb      	strb	r3, [r7, #6]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	b299      	uxth	r1, r3
 8002a12:	79bb      	ldrb	r3, [r7, #6]
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <I2C3_MulitByteRead+0x3c>)
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2301      	movs	r3, #1
 8002a24:	4804      	ldr	r0, [pc, #16]	@ (8002a38 <I2C3_MulitByteRead+0x40>)
 8002a26:	f000 ff81 	bl	800392c <HAL_I2C_Mem_Read>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	0003d090 	.word	0x0003d090
 8002a38:	20025b58 	.word	0x20025b58

08002a3c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002a46:	204d      	movs	r0, #77	@ 0x4d
 8002a48:	f7ff fe06 	bl	8002658 <STMPE811_Read>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002a50:	204e      	movs	r0, #78	@ 0x4e
 8002a52:	f7ff fe01 	bl	8002658 <STMPE811_Read>
 8002a56:	4603      	mov	r3, r0
 8002a58:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002a5a:	7a7b      	ldrb	r3, [r7, #9]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	b21a      	sxth	r2, r3
 8002a60:	7a3b      	ldrb	r3, [r7, #8]
 8002a62:	b21b      	sxth	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a6c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a70:	4293      	cmp	r3, r2
 8002a72:	dc06      	bgt.n	8002a82 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002a74:	89fb      	ldrh	r3, [r7, #14]
 8002a76:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	81fb      	strh	r3, [r7, #14]
 8002a80:	e005      	b.n	8002a8e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002a88:	3308      	adds	r3, #8
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a92:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <TM_STMPE811_ReadX+0xb8>)
 8002a94:	fb82 1203 	smull	r1, r2, r2, r3
 8002a98:	441a      	add	r2, r3
 8002a9a:	10d2      	asrs	r2, r2, #3
 8002a9c:	17db      	asrs	r3, r3, #31
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aa6:	2bef      	cmp	r3, #239	@ 0xef
 8002aa8:	dd02      	ble.n	8002ab0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002aaa:	23ef      	movs	r3, #239	@ 0xef
 8002aac:	81fb      	strh	r3, [r7, #14]
 8002aae:	e005      	b.n	8002abc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002ab0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da01      	bge.n	8002abc <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002abc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dd05      	ble.n	8002ad2 <TM_STMPE811_ReadX+0x96>
 8002ac6:	89fa      	ldrh	r2, [r7, #14]
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	e004      	b.n	8002adc <TM_STMPE811_ReadX+0xa0>
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	88fa      	ldrh	r2, [r7, #6]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b21b      	sxth	r3, r3
 8002adc:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002ade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	dd01      	ble.n	8002aea <TM_STMPE811_ReadX+0xae>
        return val;
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	e000      	b.n	8002aec <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002aea:	88fb      	ldrh	r3, [r7, #6]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	88888889 	.word	0x88888889

08002af8 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002b02:	204f      	movs	r0, #79	@ 0x4f
 8002b04:	f7ff fda8 	bl	8002658 <STMPE811_Read>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002b0c:	2050      	movs	r0, #80	@ 0x50
 8002b0e:	f7ff fda3 	bl	8002658 <STMPE811_Read>
 8002b12:	4603      	mov	r3, r0
 8002b14:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002b16:	7a7b      	ldrb	r3, [r7, #9]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	7a3b      	ldrb	r3, [r7, #8]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002b24:	89fb      	ldrh	r3, [r7, #14]
 8002b26:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b32:	4a19      	ldr	r2, [pc, #100]	@ (8002b98 <TM_STMPE811_ReadY+0xa0>)
 8002b34:	fb82 1203 	smull	r1, r2, r2, r3
 8002b38:	1052      	asrs	r2, r2, #1
 8002b3a:	17db      	asrs	r3, r3, #31
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002b40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	dc02      	bgt.n	8002b4e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	81fb      	strh	r3, [r7, #14]
 8002b4c:	e007      	b.n	8002b5e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002b4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b52:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b56:	db02      	blt.n	8002b5e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002b58:	f240 133f 	movw	r3, #319	@ 0x13f
 8002b5c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002b5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dd05      	ble.n	8002b74 <TM_STMPE811_ReadY+0x7c>
 8002b68:	89fa      	ldrh	r2, [r7, #14]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	e004      	b.n	8002b7e <TM_STMPE811_ReadY+0x86>
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	88fa      	ldrh	r2, [r7, #6]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002b80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	dd01      	ble.n	8002b8c <TM_STMPE811_ReadY+0x94>
        return val;
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	e000      	b.n	8002b8e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2e8ba2e9 	.word	0x2e8ba2e9

08002b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <SystemInit+0x20>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba6:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <SystemInit+0x20>)
 8002ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc4:	f7ff ffea 	bl	8002b9c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc8:	480c      	ldr	r0, [pc, #48]	@ (8002bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bca:	490d      	ldr	r1, [pc, #52]	@ (8002c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bd0:	e002      	b.n	8002bd8 <LoopCopyDataInit>

08002bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd6:	3304      	adds	r3, #4

08002bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bdc:	d3f9      	bcc.n	8002bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002be0:	4c0a      	ldr	r4, [pc, #40]	@ (8002c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be4:	e001      	b.n	8002bea <LoopFillZerobss>

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be8:	3204      	adds	r2, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f003 fced 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7ff f9c2 	bl	8001f7a <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bf8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002c04:	08007aa0 	.word	0x08007aa0
  ldr r2, =_sbss
 8002c08:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002c0c:	20025da8 	.word	0x20025da8

08002c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c18:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c54 <HAL_Init+0x40>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c24:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	@ (8002c54 <HAL_Init+0x40>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	@ (8002c54 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <HAL_Init+0x40>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f931 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f808 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7ff f9ee 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_InitTick+0x54>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <HAL_InitTick+0x58>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f93b 	bl	8002ef2 <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	f000 f911 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	@ (8002cb4 <HAL_InitTick+0x5c>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000144 	.word	0x20000144
 8002cb0:	2000014c 	.word	0x2000014c
 8002cb4:	20000148 	.word	0x20000148

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	@ (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	2000014c 	.word	0x2000014c
 8002cdc:	20025bb0 	.word	0x20025bb0

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20025bb0 	.word	0x20025bb0

08002cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7ff ffee 	bl	8002ce0 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d005      	beq.n	8002d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_Delay+0x44>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d1e:	bf00      	nop
 8002d20:	f7ff ffde 	bl	8002ce0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8f7      	bhi.n	8002d20 <HAL_Delay+0x28>
  {
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000014c 	.word	0x2000014c

08002d40 <__NVIC_SetPriorityGrouping>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_GetPriorityGrouping>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	@ (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	@ (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	@ 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	@ 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff47 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff5c 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffb0 	bl	8002e60 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	e177      	b.n	8003218 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 8166 	bne.w	8003212 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d005      	beq.n	8002f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d130      	bne.n	8002fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	2203      	movs	r2, #3
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	f003 0201 	and.w	r2, r3, #1
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d017      	beq.n	8002ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d123      	bne.n	8003050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	69b9      	ldr	r1, [r7, #24]
 800304c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0203 	and.w	r2, r3, #3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80c0 	beq.w	8003212 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b66      	ldr	r3, [pc, #408]	@ (8003230 <HAL_GPIO_Init+0x324>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	4a65      	ldr	r2, [pc, #404]	@ (8003230 <HAL_GPIO_Init+0x324>)
 800309c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a2:	4b63      	ldr	r3, [pc, #396]	@ (8003230 <HAL_GPIO_Init+0x324>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ae:	4a61      	ldr	r2, [pc, #388]	@ (8003234 <HAL_GPIO_Init+0x328>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <HAL_GPIO_Init+0x32c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d037      	beq.n	800314a <HAL_GPIO_Init+0x23e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a57      	ldr	r2, [pc, #348]	@ (800323c <HAL_GPIO_Init+0x330>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_GPIO_Init+0x23a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_GPIO_Init+0x334>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02b      	beq.n	8003142 <HAL_GPIO_Init+0x236>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a55      	ldr	r2, [pc, #340]	@ (8003244 <HAL_GPIO_Init+0x338>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d025      	beq.n	800313e <HAL_GPIO_Init+0x232>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a54      	ldr	r2, [pc, #336]	@ (8003248 <HAL_GPIO_Init+0x33c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01f      	beq.n	800313a <HAL_GPIO_Init+0x22e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a53      	ldr	r2, [pc, #332]	@ (800324c <HAL_GPIO_Init+0x340>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d019      	beq.n	8003136 <HAL_GPIO_Init+0x22a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a52      	ldr	r2, [pc, #328]	@ (8003250 <HAL_GPIO_Init+0x344>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_GPIO_Init+0x226>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a51      	ldr	r2, [pc, #324]	@ (8003254 <HAL_GPIO_Init+0x348>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00d      	beq.n	800312e <HAL_GPIO_Init+0x222>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a50      	ldr	r2, [pc, #320]	@ (8003258 <HAL_GPIO_Init+0x34c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d007      	beq.n	800312a <HAL_GPIO_Init+0x21e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4f      	ldr	r2, [pc, #316]	@ (800325c <HAL_GPIO_Init+0x350>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_GPIO_Init+0x21a>
 8003122:	2309      	movs	r3, #9
 8003124:	e012      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003126:	230a      	movs	r3, #10
 8003128:	e010      	b.n	800314c <HAL_GPIO_Init+0x240>
 800312a:	2308      	movs	r3, #8
 800312c:	e00e      	b.n	800314c <HAL_GPIO_Init+0x240>
 800312e:	2307      	movs	r3, #7
 8003130:	e00c      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003132:	2306      	movs	r3, #6
 8003134:	e00a      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003136:	2305      	movs	r3, #5
 8003138:	e008      	b.n	800314c <HAL_GPIO_Init+0x240>
 800313a:	2304      	movs	r3, #4
 800313c:	e006      	b.n	800314c <HAL_GPIO_Init+0x240>
 800313e:	2303      	movs	r3, #3
 8003140:	e004      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003142:	2302      	movs	r3, #2
 8003144:	e002      	b.n	800314c <HAL_GPIO_Init+0x240>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_GPIO_Init+0x240>
 800314a:	2300      	movs	r3, #0
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	0092      	lsls	r2, r2, #2
 8003154:	4093      	lsls	r3, r2
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315c:	4935      	ldr	r1, [pc, #212]	@ (8003234 <HAL_GPIO_Init+0x328>)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800316a:	4b3d      	ldr	r3, [pc, #244]	@ (8003260 <HAL_GPIO_Init+0x354>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800318e:	4a34      	ldr	r2, [pc, #208]	@ (8003260 <HAL_GPIO_Init+0x354>)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003194:	4b32      	ldr	r3, [pc, #200]	@ (8003260 <HAL_GPIO_Init+0x354>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031b8:	4a29      	ldr	r2, [pc, #164]	@ (8003260 <HAL_GPIO_Init+0x354>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031be:	4b28      	ldr	r3, [pc, #160]	@ (8003260 <HAL_GPIO_Init+0x354>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_GPIO_Init+0x354>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <HAL_GPIO_Init+0x354>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <HAL_GPIO_Init+0x354>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3301      	adds	r3, #1
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0f      	cmp	r3, #15
 800321c:	f67f ae84 	bls.w	8002f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40013800 	.word	0x40013800
 8003238:	40020000 	.word	0x40020000
 800323c:	40020400 	.word	0x40020400
 8003240:	40020800 	.word	0x40020800
 8003244:	40020c00 	.word	0x40020c00
 8003248:	40021000 	.word	0x40021000
 800324c:	40021400 	.word	0x40021400
 8003250:	40021800 	.word	0x40021800
 8003254:	40021c00 	.word	0x40021c00
 8003258:	40022000 	.word	0x40022000
 800325c:	40022400 	.word	0x40022400
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e0d9      	b.n	8003434 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003280:	2201      	movs	r2, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	f040 80c9 	bne.w	800342e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800329c:	4a6b      	ldr	r2, [pc, #428]	@ (800344c <HAL_GPIO_DeInit+0x1e8>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4013      	ands	r3, r2
 80032bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_GPIO_DeInit+0x1ec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d037      	beq.n	8003336 <HAL_GPIO_DeInit+0xd2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a62      	ldr	r2, [pc, #392]	@ (8003454 <HAL_GPIO_DeInit+0x1f0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d031      	beq.n	8003332 <HAL_GPIO_DeInit+0xce>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a61      	ldr	r2, [pc, #388]	@ (8003458 <HAL_GPIO_DeInit+0x1f4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02b      	beq.n	800332e <HAL_GPIO_DeInit+0xca>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a60      	ldr	r2, [pc, #384]	@ (800345c <HAL_GPIO_DeInit+0x1f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d025      	beq.n	800332a <HAL_GPIO_DeInit+0xc6>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003460 <HAL_GPIO_DeInit+0x1fc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01f      	beq.n	8003326 <HAL_GPIO_DeInit+0xc2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a5e      	ldr	r2, [pc, #376]	@ (8003464 <HAL_GPIO_DeInit+0x200>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_GPIO_DeInit+0xbe>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <HAL_GPIO_DeInit+0x204>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_GPIO_DeInit+0xba>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_GPIO_DeInit+0x208>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00d      	beq.n	800331a <HAL_GPIO_DeInit+0xb6>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a5b      	ldr	r2, [pc, #364]	@ (8003470 <HAL_GPIO_DeInit+0x20c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d007      	beq.n	8003316 <HAL_GPIO_DeInit+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a5a      	ldr	r2, [pc, #360]	@ (8003474 <HAL_GPIO_DeInit+0x210>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_GPIO_DeInit+0xae>
 800330e:	2309      	movs	r3, #9
 8003310:	e012      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003312:	230a      	movs	r3, #10
 8003314:	e010      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003316:	2308      	movs	r3, #8
 8003318:	e00e      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 800331a:	2307      	movs	r3, #7
 800331c:	e00c      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 800331e:	2306      	movs	r3, #6
 8003320:	e00a      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003322:	2305      	movs	r3, #5
 8003324:	e008      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003326:	2304      	movs	r3, #4
 8003328:	e006      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 800332a:	2303      	movs	r3, #3
 800332c:	e004      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 800332e:	2302      	movs	r3, #2
 8003330:	e002      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_DeInit+0xd4>
 8003336:	2300      	movs	r3, #0
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d132      	bne.n	80033ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	4949      	ldr	r1, [pc, #292]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 8003352:	4013      	ands	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003356:	4b48      	ldr	r3, [pc, #288]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	4946      	ldr	r1, [pc, #280]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 8003360:	4013      	ands	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003364:	4b44      	ldr	r3, [pc, #272]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43db      	mvns	r3, r3
 800336c:	4942      	ldr	r1, [pc, #264]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 800336e:	4013      	ands	r3, r2
 8003370:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	493f      	ldr	r1, [pc, #252]	@ (8003478 <HAL_GPIO_DeInit+0x214>)
 800337c:	4013      	ands	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	220f      	movs	r2, #15
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003390:	4a2e      	ldr	r2, [pc, #184]	@ (800344c <HAL_GPIO_DeInit+0x1e8>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	43da      	mvns	r2, r3
 80033a0:	482a      	ldr	r0, [pc, #168]	@ (800344c <HAL_GPIO_DeInit+0x1e8>)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	400a      	ands	r2, r1
 80033a8:	3302      	adds	r3, #2
 80033aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2103      	movs	r1, #3
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	401a      	ands	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	08d2      	lsrs	r2, r2, #3
 80033e4:	4019      	ands	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3208      	adds	r2, #8
 80033ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2103      	movs	r1, #3
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2103      	movs	r1, #3
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	f67f af22 	bls.w	8003280 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800343c:	bf00      	nop
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40021400 	.word	0x40021400
 8003468:	40021800 	.word	0x40021800
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40022000 	.word	0x40022000
 8003474:	40022400 	.word	0x40022400
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
 8003488:	4613      	mov	r3, r2
 800348a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800348c:	787b      	ldrb	r3, [r7, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003498:	e003      	b.n	80034a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	041a      	lsls	r2, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	619a      	str	r2, [r3, #24]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e12b      	b.n	800371a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fdce 	bl	8002078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	@ 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003514:	f001 ff06 	bl	8005324 <HAL_RCC_GetPCLK1Freq>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a81      	ldr	r2, [pc, #516]	@ (8003724 <HAL_I2C_Init+0x274>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d807      	bhi.n	8003534 <HAL_I2C_Init+0x84>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a80      	ldr	r2, [pc, #512]	@ (8003728 <HAL_I2C_Init+0x278>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e006      	b.n	8003542 <HAL_I2C_Init+0x92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a7d      	ldr	r2, [pc, #500]	@ (800372c <HAL_I2C_Init+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0e7      	b.n	800371a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a78      	ldr	r2, [pc, #480]	@ (8003730 <HAL_I2C_Init+0x280>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0c9b      	lsrs	r3, r3, #18
 8003554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a6a      	ldr	r2, [pc, #424]	@ (8003724 <HAL_I2C_Init+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <HAL_I2C_Init+0xd4>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	e009      	b.n	8003598 <HAL_I2C_Init+0xe8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	4a69      	ldr	r2, [pc, #420]	@ (8003734 <HAL_I2C_Init+0x284>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3301      	adds	r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	495c      	ldr	r1, [pc, #368]	@ (8003724 <HAL_I2C_Init+0x274>)
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d819      	bhi.n	80035ec <HAL_I2C_Init+0x13c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e59      	subs	r1, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035cc:	400b      	ands	r3, r1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_I2C_Init+0x138>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e59      	subs	r1, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	e051      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e04f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <HAL_I2C_Init+0x168>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e012      	b.n	800363e <HAL_I2C_Init+0x18e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x196>
 8003642:	2301      	movs	r3, #1
 8003644:	e022      	b.n	800368c <HAL_I2C_Init+0x1dc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10e      	bne.n	800366c <HAL_I2C_Init+0x1bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e58      	subs	r0, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366a:	e00f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6809      	ldr	r1, [r1, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6911      	ldr	r1, [r2, #16]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	000186a0 	.word	0x000186a0
 8003728:	001e847f 	.word	0x001e847f
 800372c:	003d08ff 	.word	0x003d08ff
 8003730:	431bde83 	.word	0x431bde83
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7ff fac5 	bl	8002ce0 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 80d9 	bne.w	8003918 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2319      	movs	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	496d      	ldr	r1, [pc, #436]	@ (8003924 <HAL_I2C_Mem_Write+0x1ec>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fc8b 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e0cc      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Write+0x56>
 800378a:	2302      	movs	r3, #2
 800378c:	e0c5      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2221      	movs	r2, #33	@ 0x21
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	@ 0x40
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003928 <HAL_I2C_Mem_Write+0x1f0>)
 80037f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fac2 	bl	8003d90 <I2C_RequestMemoryWrite>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d052      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e081      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fd50 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	2b04      	cmp	r3, #4
 800382c:	d107      	bne.n	800383e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06b      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x180>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1aa      	bne.n	8003816 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fd43 	bl	8004350 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e016      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000

0800392c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7ff f9cb 	bl	8002ce0 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	f040 8214 	bne.w	8003d82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2319      	movs	r3, #25
 8003960:	2201      	movs	r2, #1
 8003962:	497b      	ldr	r1, [pc, #492]	@ (8003b50 <HAL_I2C_Mem_Read+0x224>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fb91 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	e207      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Mem_Read+0x56>
 800397e:	2302      	movs	r3, #2
 8003980:	e200      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d007      	beq.n	80039a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2222      	movs	r2, #34	@ 0x22
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80039d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b54 <HAL_I2C_Mem_Read+0x228>)
 80039e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ea:	88f8      	ldrh	r0, [r7, #6]
 80039ec:	893a      	ldrh	r2, [r7, #8]
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4603      	mov	r3, r0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa5e 	bl	8003ebc <I2C_RequestMemoryRead>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e1bc      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d113      	bne.n	8003a3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	623b      	str	r3, [r7, #32]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	623b      	str	r3, [r7, #32]
 8003a26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e190      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d11b      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e170      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d11b      	bne.n	8003aba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	e150      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ad0:	e144      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	f200 80f1 	bhi.w	8003cbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d123      	bne.n	8003b2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fc79 	bl	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e145      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b2a:	e117      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d14e      	bne.n	8003bd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4906      	ldr	r1, [pc, #24]	@ (8003b58 <HAL_I2C_Mem_Read+0x22c>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 faa4 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e11a      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
 8003b4e:	bf00      	nop
 8003b50:	00100002 	.word	0x00100002
 8003b54:	ffff0000 	.word	0xffff0000
 8003b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bd0:	e0c4      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	2200      	movs	r2, #0
 8003bda:	496c      	ldr	r1, [pc, #432]	@ (8003d8c <HAL_I2C_Mem_Read+0x460>)
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fa55 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cb      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c34:	2200      	movs	r2, #0
 8003c36:	4955      	ldr	r1, [pc, #340]	@ (8003d8c <HAL_I2C_Mem_Read+0x460>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fa27 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e09d      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cbc:	e04e      	b.n	8003d5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fb8c 	bl	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e058      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d124      	bne.n	8003d5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f47f aeb6 	bne.w	8003ad2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3728      	adds	r7, #40	@ 0x28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	00010004 	.word	0x00010004

08003d90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f960 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de0:	d103      	bne.n	8003dea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e05f      	b.n	8003eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	492d      	ldr	r1, [pc, #180]	@ (8003eb8 <I2C_RequestMemoryWrite+0x128>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f9bb 	bl	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e04c      	b.n	8003eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa46 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e02b      	b.n	8003eae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e5c:	893b      	ldrh	r3, [r7, #8]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	611a      	str	r2, [r3, #16]
 8003e66:	e021      	b.n	8003eac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e68:	893b      	ldrh	r3, [r7, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa20 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e005      	b.n	8003eae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea2:	893b      	ldrh	r3, [r7, #8]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00010002 	.word	0x00010002

08003ebc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	817b      	strh	r3, [r7, #10]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	813b      	strh	r3, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ee4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f8c2 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00d      	beq.n	8003f2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f1c:	d103      	bne.n	8003f26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e0aa      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f2a:	897b      	ldrh	r3, [r7, #10]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	4952      	ldr	r1, [pc, #328]	@ (8004088 <I2C_RequestMemoryRead+0x1cc>)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f91d 	bl	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e097      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f68:	6a39      	ldr	r1, [r7, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f9a8 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00d      	beq.n	8003f92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d107      	bne.n	8003f8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e076      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f98:	893b      	ldrh	r3, [r7, #8]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]
 8003fa2:	e021      	b.n	8003fe8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fa4:	893b      	ldrh	r3, [r7, #8]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb4:	6a39      	ldr	r1, [r7, #32]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f982 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d107      	bne.n	8003fda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e050      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fde:	893b      	ldrh	r3, [r7, #8]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	6a39      	ldr	r1, [r7, #32]
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f967 	bl	80042c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d107      	bne.n	8004010 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800400e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e035      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004022:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2200      	movs	r2, #0
 800402c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f82b 	bl	800408c <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800404a:	d103      	bne.n	8004054 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e013      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	4906      	ldr	r1, [pc, #24]	@ (8004088 <I2C_RequestMemoryRead+0x1cc>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f886 	bl	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	00010002 	.word	0x00010002

0800408c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800409c:	e048      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d044      	beq.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7fe fe1b 	bl	8002ce0 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d139      	bne.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10d      	bne.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	e00c      	b.n	80040fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d116      	bne.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e023      	b.n	8004178 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10d      	bne.n	8004156 <I2C_WaitOnFlagUntilTimeout+0xca>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	43da      	mvns	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	e00c      	b.n	8004170 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	429a      	cmp	r2, r3
 8004174:	d093      	beq.n	800409e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418e:	e071      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	d123      	bne.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e067      	b.n	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d041      	beq.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fe fd76 	bl	8002ce0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d136      	bne.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d10c      	bne.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	43da      	mvns	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4013      	ands	r3, r2
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e00b      	b.n	8004242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	43da      	mvns	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d016      	beq.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e021      	b.n	80042b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10c      	bne.n	8004298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e00b      	b.n	80042b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f47f af6d 	bne.w	8004190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042cc:	e034      	b.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f8e3 	bl	800449a <I2C_IsAcknowledgeFailed>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e034      	b.n	8004348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d028      	beq.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e6:	f7fe fcfb 	bl	8002ce0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11d      	bne.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d016      	beq.n	8004338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e007      	b.n	8004348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004342:	2b80      	cmp	r3, #128	@ 0x80
 8004344:	d1c3      	bne.n	80042ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f89b 	bl	800449a <I2C_IsAcknowledgeFailed>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e034      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d028      	beq.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fcb3 	bl	8002ce0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11d      	bne.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d016      	beq.n	80043c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d1c3      	bne.n	800435e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043ec:	e049      	b.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d119      	bne.n	8004430 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0210 	mvn.w	r2, #16
 8004404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e030      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7fe fc56 	bl	8002ce0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11d      	bne.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d016      	beq.n	8004482 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f043 0220 	orr.w	r2, r3, #32
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	d1ae      	bne.n	80043ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b0:	d11b      	bne.n	80044ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e0bf      	b.n	800468a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fe14 	bl	800214c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800453a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6999      	ldr	r1, [r3, #24]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004550:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b4a      	ldr	r3, [pc, #296]	@ (8004694 <HAL_LTDC_Init+0x19c>)
 800456c:	400b      	ands	r3, r1
 800456e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	041b      	lsls	r3, r3, #16
 8004576:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6899      	ldr	r1, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68d9      	ldr	r1, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b3e      	ldr	r3, [pc, #248]	@ (8004694 <HAL_LTDC_Init+0x19c>)
 800459a:	400b      	ands	r3, r1
 800459c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68d9      	ldr	r1, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6919      	ldr	r1, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <HAL_LTDC_Init+0x19c>)
 80045c8:	400b      	ands	r3, r1
 80045ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6919      	ldr	r1, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6959      	ldr	r1, [r3, #20]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b27      	ldr	r3, [pc, #156]	@ (8004694 <HAL_LTDC_Init+0x19c>)
 80045f6:	400b      	ands	r3, r1
 80045f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6959      	ldr	r1, [r3, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0206 	orr.w	r2, r2, #6
 8004666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	f000f800 	.word	0xf000f800

08004698 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004698:	b5b0      	push	{r4, r5, r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_LTDC_ConfigLayer+0x1a>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e02c      	b.n	800470c <HAL_LTDC_ConfigLayer+0x74>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2134      	movs	r1, #52	@ 0x34
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4614      	mov	r4, r2
 80046d6:	461d      	mov	r5, r3
 80046d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f811 	bl	8004714 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bdb0      	pop	{r4, r5, r7, pc}

08004714 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004730:	4413      	add	r3, r2
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	01db      	lsls	r3, r3, #7
 8004740:	4413      	add	r3, r2
 8004742:	3384      	adds	r3, #132	@ 0x84
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4611      	mov	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	01d2      	lsls	r2, r2, #7
 8004750:	440a      	add	r2, r1
 8004752:	3284      	adds	r2, #132	@ 0x84
 8004754:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004758:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800476a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800476c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	440b      	add	r3, r1
 800477a:	3384      	adds	r3, #132	@ 0x84
 800477c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004782:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004792:	4413      	add	r3, r2
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	01db      	lsls	r3, r3, #7
 80047a2:	4413      	add	r3, r2
 80047a4:	3384      	adds	r3, #132	@ 0x84
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	4611      	mov	r1, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	01d2      	lsls	r2, r2, #7
 80047b2:	440a      	add	r2, r1
 80047b4:	3284      	adds	r2, #132	@ 0x84
 80047b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ca:	4413      	add	r3, r2
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4619      	mov	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	440b      	add	r3, r1
 80047da:	3384      	adds	r3, #132	@ 0x84
 80047dc:	4619      	mov	r1, r3
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	4413      	add	r3, r2
 80047f0:	3384      	adds	r3, #132	@ 0x84
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	4611      	mov	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	01d2      	lsls	r2, r2, #7
 80047fe:	440a      	add	r2, r1
 8004800:	3284      	adds	r2, #132	@ 0x84
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	01db      	lsls	r3, r3, #7
 8004812:	4413      	add	r3, r2
 8004814:	3384      	adds	r3, #132	@ 0x84
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	061b      	lsls	r3, r3, #24
 8004838:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	01db      	lsls	r3, r3, #7
 8004844:	4413      	add	r3, r2
 8004846:	3384      	adds	r3, #132	@ 0x84
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	4413      	add	r3, r2
 8004856:	3384      	adds	r3, #132	@ 0x84
 8004858:	461a      	mov	r2, r3
 800485a:	2300      	movs	r3, #0
 800485c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004864:	461a      	mov	r2, r3
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	431a      	orrs	r2, r3
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	01db      	lsls	r3, r3, #7
 8004878:	440b      	add	r3, r1
 800487a:	3384      	adds	r3, #132	@ 0x84
 800487c:	4619      	mov	r1, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	4413      	add	r3, r2
 8004890:	3384      	adds	r3, #132	@ 0x84
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	4611      	mov	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	01d2      	lsls	r2, r2, #7
 800489e:	440a      	add	r2, r1
 80048a0:	3284      	adds	r2, #132	@ 0x84
 80048a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	4413      	add	r3, r2
 80048b4:	3384      	adds	r3, #132	@ 0x84
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	01db      	lsls	r3, r3, #7
 80048c8:	4413      	add	r3, r2
 80048ca:	3384      	adds	r3, #132	@ 0x84
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4611      	mov	r1, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	01d2      	lsls	r2, r2, #7
 80048d8:	440a      	add	r2, r1
 80048da:	3284      	adds	r2, #132	@ 0x84
 80048dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6809      	ldr	r1, [r1, #0]
 80048f2:	4608      	mov	r0, r1
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	01c9      	lsls	r1, r1, #7
 80048f8:	4401      	add	r1, r0
 80048fa:	3184      	adds	r1, #132	@ 0x84
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	01db      	lsls	r3, r3, #7
 800490a:	4413      	add	r3, r2
 800490c:	3384      	adds	r3, #132	@ 0x84
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	01db      	lsls	r3, r3, #7
 800491a:	4413      	add	r3, r2
 800491c:	3384      	adds	r3, #132	@ 0x84
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	01db      	lsls	r3, r3, #7
 800492e:	4413      	add	r3, r2
 8004930:	3384      	adds	r3, #132	@ 0x84
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004942:	2304      	movs	r3, #4
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e01b      	b.n	8004980 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d102      	bne.n	8004956 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004950:	2303      	movs	r3, #3
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e014      	b.n	8004980 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00b      	beq.n	8004976 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004962:	2b02      	cmp	r3, #2
 8004964:	d007      	beq.n	8004976 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800496a:	2b03      	cmp	r3, #3
 800496c:	d003      	beq.n	8004976 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004972:	2b07      	cmp	r3, #7
 8004974:	d102      	bne.n	800497c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004976:	2302      	movs	r3, #2
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	e001      	b.n	8004980 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	01db      	lsls	r3, r3, #7
 800498a:	4413      	add	r3, r2
 800498c:	3384      	adds	r3, #132	@ 0x84
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	4611      	mov	r1, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	01d2      	lsls	r2, r2, #7
 800499a:	440a      	add	r2, r1
 800499c:	3284      	adds	r2, #132	@ 0x84
 800499e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80049a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1acb      	subs	r3, r1, r3
 80049ba:	69f9      	ldr	r1, [r7, #28]
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	6809      	ldr	r1, [r1, #0]
 80049c6:	4608      	mov	r0, r1
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	01c9      	lsls	r1, r1, #7
 80049cc:	4401      	add	r1, r0
 80049ce:	3184      	adds	r1, #132	@ 0x84
 80049d0:	4313      	orrs	r3, r2
 80049d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	01db      	lsls	r3, r3, #7
 80049de:	4413      	add	r3, r2
 80049e0:	3384      	adds	r3, #132	@ 0x84
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	4611      	mov	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	01d2      	lsls	r2, r2, #7
 80049ee:	440a      	add	r2, r1
 80049f0:	3284      	adds	r2, #132	@ 0x84
 80049f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049f6:	f023 0307 	bic.w	r3, r3, #7
 80049fa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	01db      	lsls	r3, r3, #7
 8004a06:	4413      	add	r3, r2
 8004a08:	3384      	adds	r3, #132	@ 0x84
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	01db      	lsls	r3, r3, #7
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3384      	adds	r3, #132	@ 0x84
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4611      	mov	r1, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	01d2      	lsls	r2, r2, #7
 8004a2c:	440a      	add	r2, r1
 8004a2e:	3284      	adds	r2, #132	@ 0x84
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	3724      	adds	r7, #36	@ 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e267      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d075      	beq.n	8004b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a62:	4b88      	ldr	r3, [pc, #544]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d00c      	beq.n	8004a88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b85      	ldr	r3, [pc, #532]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d112      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4b82      	ldr	r3, [pc, #520]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a86:	d10b      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a88:	4b7e      	ldr	r3, [pc, #504]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d05b      	beq.n	8004b4c <HAL_RCC_OscConfig+0x108>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d157      	bne.n	8004b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e242      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa8:	d106      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x74>
 8004aaa:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a75      	ldr	r2, [pc, #468]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e01d      	b.n	8004af4 <HAL_RCC_OscConfig+0xb0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x98>
 8004ac2:	4b70      	ldr	r3, [pc, #448]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6d      	ldr	r3, [pc, #436]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0xb0>
 8004adc:	4b69      	ldr	r3, [pc, #420]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a68      	ldr	r2, [pc, #416]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b66      	ldr	r3, [pc, #408]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a65      	ldr	r2, [pc, #404]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe f8f0 	bl	8002ce0 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fe f8ec 	bl	8002ce0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	@ 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e207      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b5b      	ldr	r3, [pc, #364]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0xc0>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe f8dc 	bl	8002ce0 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fe f8d8 	bl	8002ce0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	@ 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e1f3      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3e:	4b51      	ldr	r3, [pc, #324]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0xe8>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d063      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b66:	4b47      	ldr	r3, [pc, #284]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d11c      	bne.n	8004bac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b44      	ldr	r3, [pc, #272]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_RCC_OscConfig+0x152>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e1c7      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	4b3b      	ldr	r3, [pc, #236]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4937      	ldr	r1, [pc, #220]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004baa:	e03a      	b.n	8004c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d020      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb4:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_OscConfig+0x244>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fe f891 	bl	8002ce0 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc2:	f7fe f88d 	bl	8002ce0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e1a8      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be0:	4b28      	ldr	r3, [pc, #160]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4925      	ldr	r1, [pc, #148]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <HAL_RCC_OscConfig+0x244>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fe f870 	bl	8002ce0 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c04:	f7fe f86c 	bl	8002ce0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e187      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c16:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <HAL_RCC_OscConfig+0x248>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fe f850 	bl	8002ce0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fe f84c 	bl	8002ce0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e167      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <HAL_RCC_OscConfig+0x240>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x200>
 8004c62:	e01b      	b.n	8004c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_OscConfig+0x248>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fe f839 	bl	8002ce0 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	e00e      	b.n	8004c90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c72:	f7fe f835 	bl	8002ce0 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d907      	bls.n	8004c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e150      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
 8004c84:	40023800 	.word	0x40023800
 8004c88:	42470000 	.word	0x42470000
 8004c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b88      	ldr	r3, [pc, #544]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ea      	bne.n	8004c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8097 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b81      	ldr	r3, [pc, #516]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cca:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b77      	ldr	r3, [pc, #476]	@ (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d118      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b74      	ldr	r3, [pc, #464]	@ (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a73      	ldr	r2, [pc, #460]	@ (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd fff5 	bl	8002ce0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fd fff1 	bl	8002ce0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e10c      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb8 <HAL_RCC_OscConfig+0x474>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x2ea>
 8004d20:	4b64      	ldr	r3, [pc, #400]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	4a63      	ldr	r2, [pc, #396]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2c:	e01c      	b.n	8004d68 <HAL_RCC_OscConfig+0x324>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x30c>
 8004d36:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d42:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0x324>
 8004d50:	4b58      	ldr	r3, [pc, #352]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4a57      	ldr	r2, [pc, #348]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5c:	4b55      	ldr	r3, [pc, #340]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	4a54      	ldr	r2, [pc, #336]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d62:	f023 0304 	bic.w	r3, r3, #4
 8004d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d015      	beq.n	8004d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fd ffb6 	bl	8002ce0 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d78:	f7fd ffb2 	bl	8002ce0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e0cb      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8e:	4b49      	ldr	r3, [pc, #292]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ee      	beq.n	8004d78 <HAL_RCC_OscConfig+0x334>
 8004d9a:	e014      	b.n	8004dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd ffa0 	bl	8002ce0 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da2:	e00a      	b.n	8004dba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da4:	f7fd ff9c 	bl	8002ce0 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0b5      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dba:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ee      	bne.n	8004da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b39      	ldr	r3, [pc, #228]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	4a38      	ldr	r2, [pc, #224]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 80a1 	beq.w	8004f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de2:	4b34      	ldr	r3, [pc, #208]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d05c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d141      	bne.n	8004e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df6:	4b31      	ldr	r3, [pc, #196]	@ (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fd ff70 	bl	8002ce0 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd ff6c 	bl	8002ce0 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e087      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e16:	4b27      	ldr	r3, [pc, #156]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	491b      	ldr	r1, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd ff45 	bl	8002ce0 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd ff41 	bl	8002ce0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e05c      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x416>
 8004e78:	e054      	b.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <HAL_RCC_OscConfig+0x478>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd ff2e 	bl	8002ce0 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd ff2a 	bl	8002ce0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e045      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x444>
 8004ea6:	e03d      	b.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e038      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <HAL_RCC_OscConfig+0x4ec>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d121      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d11a      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d111      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800

08004f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0cc      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b68      	ldr	r3, [pc, #416]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90c      	bls.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d001      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0b8      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d020      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f88:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa0:	4b53      	ldr	r3, [pc, #332]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fac:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	494d      	ldr	r1, [pc, #308]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d119      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e07f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e06f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e067      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4934      	ldr	r1, [pc, #208]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005024:	f7fd fe5c 	bl	8002ce0 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fd fe58 	bl	8002ce0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e04f      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2b      	ldr	r3, [pc, #172]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b25      	ldr	r3, [pc, #148]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d20c      	bcs.n	800507c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b22      	ldr	r3, [pc, #136]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b20      	ldr	r3, [pc, #128]	@ (80050ec <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e032      	b.n	80050e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4916      	ldr	r1, [pc, #88]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	490e      	ldr	r1, [pc, #56]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ba:	f000 f821 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050be:	4602      	mov	r2, r0
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	490a      	ldr	r1, [pc, #40]	@ (80050f4 <HAL_RCC_ClockConfig+0x1c0>)
 80050cc:	5ccb      	ldrb	r3, [r1, r3]
 80050ce:	fa22 f303 	lsr.w	r3, r2, r3
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050d6:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fd fdbc 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00
 80050f0:	40023800 	.word	0x40023800
 80050f4:	08007a38 	.word	0x08007a38
 80050f8:	20000144 	.word	0x20000144
 80050fc:	20000148 	.word	0x20000148

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005104:	b094      	sub	sp, #80	@ 0x50
 8005106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005118:	4b79      	ldr	r3, [pc, #484]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b08      	cmp	r3, #8
 8005122:	d00d      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x40>
 8005124:	2b08      	cmp	r3, #8
 8005126:	f200 80e1 	bhi.w	80052ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x34>
 800512e:	2b04      	cmp	r3, #4
 8005130:	d003      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x3a>
 8005132:	e0db      	b.n	80052ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b73      	ldr	r3, [pc, #460]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x204>)
 8005136:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005138:	e0db      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800513a:	4b73      	ldr	r3, [pc, #460]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x208>)
 800513c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800513e:	e0d8      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005140:	4b6f      	ldr	r3, [pc, #444]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005148:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800514a:	4b6d      	ldr	r3, [pc, #436]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d063      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005156:	4b6a      	ldr	r3, [pc, #424]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	2200      	movs	r2, #0
 800515e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005160:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005168:	633b      	str	r3, [r7, #48]	@ 0x30
 800516a:	2300      	movs	r3, #0
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
 800516e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005172:	4622      	mov	r2, r4
 8005174:	462b      	mov	r3, r5
 8005176:	f04f 0000 	mov.w	r0, #0
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	0159      	lsls	r1, r3, #5
 8005180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005184:	0150      	lsls	r0, r2, #5
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4621      	mov	r1, r4
 800518c:	1a51      	subs	r1, r2, r1
 800518e:	6139      	str	r1, [r7, #16]
 8005190:	4629      	mov	r1, r5
 8005192:	eb63 0301 	sbc.w	r3, r3, r1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a4:	4659      	mov	r1, fp
 80051a6:	018b      	lsls	r3, r1, #6
 80051a8:	4651      	mov	r1, sl
 80051aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ae:	4651      	mov	r1, sl
 80051b0:	018a      	lsls	r2, r1, #6
 80051b2:	4651      	mov	r1, sl
 80051b4:	ebb2 0801 	subs.w	r8, r2, r1
 80051b8:	4659      	mov	r1, fp
 80051ba:	eb63 0901 	sbc.w	r9, r3, r1
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	4623      	mov	r3, r4
 80051d8:	eb18 0303 	adds.w	r3, r8, r3
 80051dc:	60bb      	str	r3, [r7, #8]
 80051de:	462b      	mov	r3, r5
 80051e0:	eb49 0303 	adc.w	r3, r9, r3
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051f2:	4629      	mov	r1, r5
 80051f4:	024b      	lsls	r3, r1, #9
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051fc:	4621      	mov	r1, r4
 80051fe:	024a      	lsls	r2, r1, #9
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800520c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005210:	f7fa fff4 	bl	80001fc <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	e058      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800521e:	4b38      	ldr	r3, [pc, #224]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	099b      	lsrs	r3, r3, #6
 8005224:	2200      	movs	r2, #0
 8005226:	4618      	mov	r0, r3
 8005228:	4611      	mov	r1, r2
 800522a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
 8005234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005238:	4642      	mov	r2, r8
 800523a:	464b      	mov	r3, r9
 800523c:	f04f 0000 	mov.w	r0, #0
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	0159      	lsls	r1, r3, #5
 8005246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524a:	0150      	lsls	r0, r2, #5
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4641      	mov	r1, r8
 8005252:	ebb2 0a01 	subs.w	sl, r2, r1
 8005256:	4649      	mov	r1, r9
 8005258:	eb63 0b01 	sbc.w	fp, r3, r1
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800526c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005270:	ebb2 040a 	subs.w	r4, r2, sl
 8005274:	eb63 050b 	sbc.w	r5, r3, fp
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	00eb      	lsls	r3, r5, #3
 8005282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005286:	00e2      	lsls	r2, r4, #3
 8005288:	4614      	mov	r4, r2
 800528a:	461d      	mov	r5, r3
 800528c:	4643      	mov	r3, r8
 800528e:	18e3      	adds	r3, r4, r3
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	464b      	mov	r3, r9
 8005294:	eb45 0303 	adc.w	r3, r5, r3
 8005298:	607b      	str	r3, [r7, #4]
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052a6:	4629      	mov	r1, r5
 80052a8:	028b      	lsls	r3, r1, #10
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b0:	4621      	mov	r1, r4
 80052b2:	028a      	lsls	r2, r1, #10
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ba:	2200      	movs	r2, #0
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	61fa      	str	r2, [r7, #28]
 80052c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c4:	f7fa ff9a 	bl	80001fc <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005300 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ea:	e002      	b.n	80052f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3750      	adds	r7, #80	@ 0x50
 80052f8:	46bd      	mov	sp, r7
 80052fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	00f42400 	.word	0x00f42400
 8005308:	007a1200 	.word	0x007a1200

0800530c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005310:	4b03      	ldr	r3, [pc, #12]	@ (8005320 <HAL_RCC_GetHCLKFreq+0x14>)
 8005312:	681b      	ldr	r3, [r3, #0]
}
 8005314:	4618      	mov	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000144 	.word	0x20000144

08005324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005328:	f7ff fff0 	bl	800530c <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b05      	ldr	r3, [pc, #20]	@ (8005344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0a9b      	lsrs	r3, r3, #10
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4903      	ldr	r1, [pc, #12]	@ (8005348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40023800 	.word	0x40023800
 8005348:	08007a48 	.word	0x08007a48

0800534c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10b      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800537c:	2b00      	cmp	r3, #0
 800537e:	d075      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005380:	4b91      	ldr	r3, [pc, #580]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005386:	f7fd fcab 	bl	8002ce0 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800538e:	f7fd fca7 	bl	8002ce0 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e189      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053a0:	4b8a      	ldr	r3, [pc, #552]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	019a      	lsls	r2, r3, #6
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	071b      	lsls	r3, r3, #28
 80053c4:	4981      	ldr	r1, [pc, #516]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01f      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053d8:	4b7c      	ldr	r3, [pc, #496]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053de:	0f1b      	lsrs	r3, r3, #28
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	061b      	lsls	r3, r3, #24
 80053f2:	431a      	orrs	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	071b      	lsls	r3, r3, #28
 80053f8:	4974      	ldr	r1, [pc, #464]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005400:	4b72      	ldr	r3, [pc, #456]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005406:	f023 021f 	bic.w	r2, r3, #31
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	3b01      	subs	r3, #1
 8005410:	496e      	ldr	r1, [pc, #440]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005412:	4313      	orrs	r3, r2
 8005414:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00d      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	019a      	lsls	r2, r3, #6
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	071b      	lsls	r3, r3, #28
 8005438:	4964      	ldr	r1, [pc, #400]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005440:	4b61      	ldr	r3, [pc, #388]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005446:	f7fd fc4b 	bl	8002ce0 <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800544e:	f7fd fc47 	bl	8002ce0 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e129      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005460:	4b5a      	ldr	r3, [pc, #360]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d105      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005480:	2b00      	cmp	r3, #0
 8005482:	d079      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005484:	4b52      	ldr	r3, [pc, #328]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800548a:	f7fd fc29 	bl	8002ce0 <HAL_GetTick>
 800548e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005490:	e008      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005492:	f7fd fc25 	bl	8002ce0 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e107      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054a4:	4b49      	ldr	r3, [pc, #292]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b0:	d0ef      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d020      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054be:	4b43      	ldr	r3, [pc, #268]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	0f1b      	lsrs	r3, r3, #28
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	019a      	lsls	r2, r3, #6
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	431a      	orrs	r2, r3
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	493b      	ldr	r1, [pc, #236]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054e6:	4b39      	ldr	r3, [pc, #228]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	4934      	ldr	r1, [pc, #208]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01e      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800550c:	4b2f      	ldr	r3, [pc, #188]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005512:	0e1b      	lsrs	r3, r3, #24
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	019a      	lsls	r2, r3, #6
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	071b      	lsls	r3, r3, #28
 800552c:	4927      	ldr	r1, [pc, #156]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005534:	4b25      	ldr	r3, [pc, #148]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800553a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	4922      	ldr	r1, [pc, #136]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800554a:	4b21      	ldr	r3, [pc, #132]	@ (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005550:	f7fd fbc6 	bl	8002ce0 <HAL_GetTick>
 8005554:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005556:	e008      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005558:	f7fd fbc2 	bl	8002ce0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0a4      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800556a:	4b18      	ldr	r3, [pc, #96]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005576:	d1ef      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 808b 	beq.w	800569c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	4a0f      	ldr	r2, [pc, #60]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	@ 0x40
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055a2:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0b      	ldr	r2, [pc, #44]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055ae:	f7fd fb97 	bl	8002ce0 <HAL_GetTick>
 80055b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055b4:	e010      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b6:	f7fd fb93 	bl	8002ce0 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d909      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e075      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055c8:	42470068 	.word	0x42470068
 80055cc:	40023800 	.word	0x40023800
 80055d0:	42470070 	.word	0x42470070
 80055d4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055d8:	4b38      	ldr	r3, [pc, #224]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0e8      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055e4:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d02f      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d028      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005602:	4b2f      	ldr	r3, [pc, #188]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800560c:	4b2d      	ldr	r3, [pc, #180]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005612:	4b2c      	ldr	r3, [pc, #176]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005618:	4a29      	ldr	r2, [pc, #164]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800561e:	4b28      	ldr	r3, [pc, #160]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d114      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800562a:	f7fd fb59 	bl	8002ce0 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005630:	e00a      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fd fb55 	bl	8002ce0 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e035      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005648:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ee      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005660:	d10d      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005662:	4b17      	ldr	r3, [pc, #92]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005676:	4912      	ldr	r1, [pc, #72]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]
 800567c:	e005      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	4a0f      	ldr	r2, [pc, #60]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005684:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005688:	6093      	str	r3, [r2, #8]
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800568c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005696:	490a      	ldr	r1, [pc, #40]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005698:	4313      	orrs	r3, r2
 800569a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80056b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40007000 	.word	0x40007000
 80056c0:	40023800 	.word	0x40023800
 80056c4:	42470e40 	.word	0x42470e40
 80056c8:	424711e0 	.word	0x424711e0

080056cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e01c      	b.n	8005718 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	795b      	ldrb	r3, [r3, #5]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fc fe54 	bl	800239c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0204 	orr.w	r2, r2, #4
 8005708:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005736:	2302      	movs	r3, #2
 8005738:	e044      	b.n	80057c4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	795b      	ldrb	r3, [r3, #5]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d133      	bne.n	80057b2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005750:	f7fd fac6 	bl	8002ce0 <HAL_GetTick>
 8005754:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005756:	e018      	b.n	800578a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005758:	f7fd fac2 	bl	8002ce0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d911      	bls.n	800578a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d00a      	beq.n	800578a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e01c      	b.n	80057c4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d1df      	bne.n	8005758 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	715a      	strb	r2, [r3, #5]
 80057b0:	e004      	b.n	80057bc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2204      	movs	r2, #4
 80057b6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	711a      	strb	r2, [r3, #4]

  return status;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e07b      	b.n	80058d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d108      	bne.n	80057f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ee:	d009      	beq.n	8005804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	61da      	str	r2, [r3, #28]
 80057f6:	e005      	b.n	8005804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc fdde 	bl	80023e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800583a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	ea42 0103 	orr.w	r1, r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	f003 0104 	and.w	r1, r3, #4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	f003 0210 	and.w	r2, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e01a      	b.n	8005926 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005906:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7fc fdb1 	bl	8002470 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b088      	sub	sp, #32
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	603b      	str	r3, [r7, #0]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800593e:	f7fd f9cf 	bl	8002ce0 <HAL_GetTick>
 8005942:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
 8005956:	e12a      	b.n	8005bae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_SPI_Transmit+0x36>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e122      	b.n	8005bae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800596e:	2b01      	cmp	r3, #1
 8005970:	d101      	bne.n	8005976 <HAL_SPI_Transmit+0x48>
 8005972:	2302      	movs	r3, #2
 8005974:	e11b      	b.n	8005bae <HAL_SPI_Transmit+0x280>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c4:	d10f      	bne.n	80059e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b40      	cmp	r3, #64	@ 0x40
 80059f2:	d007      	beq.n	8005a04 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a0c:	d152      	bne.n	8005ab4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_SPI_Transmit+0xee>
 8005a16:	8b7b      	ldrh	r3, [r7, #26]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d145      	bne.n	8005aa8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	1c9a      	adds	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a40:	e032      	b.n	8005aa8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d112      	bne.n	8005a76 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	881a      	ldrh	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	1c9a      	adds	r2, r3, #2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a74:	e018      	b.n	8005aa8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a76:	f7fd f933 	bl	8002ce0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d803      	bhi.n	8005a8e <HAL_SPI_Transmit+0x160>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d102      	bne.n	8005a94 <HAL_SPI_Transmit+0x166>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e082      	b.n	8005bae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1c7      	bne.n	8005a42 <HAL_SPI_Transmit+0x114>
 8005ab2:	e053      	b.n	8005b5c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Transmit+0x194>
 8005abc:	8b7b      	ldrh	r3, [r7, #26]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d147      	bne.n	8005b52 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ae8:	e033      	b.n	8005b52 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d113      	bne.n	8005b20 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b1e:	e018      	b.n	8005b52 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b20:	f7fd f8de 	bl	8002ce0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d803      	bhi.n	8005b38 <HAL_SPI_Transmit+0x20a>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d102      	bne.n	8005b3e <HAL_SPI_Transmit+0x210>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e02d      	b.n	8005bae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1c6      	bne.n	8005aea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8bf 	bl	8005ce4 <SPI_EndRxTxTransaction>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc4:	b2db      	uxtb	r3, r3
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005be4:	f7fd f87c 	bl	8002ce0 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bf4:	f7fd f874 	bl	8002ce0 <HAL_GetTick>
 8005bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bfa:	4b39      	ldr	r3, [pc, #228]	@ (8005ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	015b      	lsls	r3, r3, #5
 8005c00:	0d1b      	lsrs	r3, r3, #20
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	fb02 f303 	mul.w	r3, r2, r3
 8005c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c0a:	e054      	b.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d050      	beq.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c14:	f7fd f864 	bl	8002ce0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d902      	bls.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d13d      	bne.n	8005ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c42:	d111      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c4c:	d004      	beq.n	8005c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c56:	d107      	bne.n	8005c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c70:	d10f      	bne.n	8005c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e017      	b.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d19b      	bne.n	8005c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000144 	.word	0x20000144

08005ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff ff6a 	bl	8005bd4 <SPI_WaitFlagStateUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e032      	b.n	8005d7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d16:	4b1b      	ldr	r3, [pc, #108]	@ (8005d84 <SPI_EndRxTxTransaction+0xa0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d88 <SPI_EndRxTxTransaction+0xa4>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	0d5b      	lsrs	r3, r3, #21
 8005d22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d34:	d112      	bne.n	8005d5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	@ 0x80
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff ff47 	bl	8005bd4 <SPI_WaitFlagStateUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e00f      	b.n	8005d7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d72:	2b80      	cmp	r3, #128	@ 0x80
 8005d74:	d0f2      	beq.n	8005d5c <SPI_EndRxTxTransaction+0x78>
 8005d76:	e000      	b.n	8005d7a <SPI_EndRxTxTransaction+0x96>
        break;
 8005d78:	bf00      	nop
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000144 	.word	0x20000144
 8005d88:	165e9f81 	.word	0x165e9f81

08005d8c <findslot>:
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <findslot+0x2c>)
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	b118      	cbz	r0, 8005d9e <findslot+0x12>
 8005d96:	6a03      	ldr	r3, [r0, #32]
 8005d98:	b90b      	cbnz	r3, 8005d9e <findslot+0x12>
 8005d9a:	f000 fb49 	bl	8006430 <__sinit>
 8005d9e:	2c13      	cmp	r4, #19
 8005da0:	d807      	bhi.n	8005db2 <findslot+0x26>
 8005da2:	4806      	ldr	r0, [pc, #24]	@ (8005dbc <findslot+0x30>)
 8005da4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8005da8:	3201      	adds	r2, #1
 8005daa:	d002      	beq.n	8005db2 <findslot+0x26>
 8005dac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	2000      	movs	r0, #0
 8005db4:	e7fc      	b.n	8005db0 <findslot+0x24>
 8005db6:	bf00      	nop
 8005db8:	20000164 	.word	0x20000164
 8005dbc:	20025bc0 	.word	0x20025bc0

08005dc0 <error>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f000 fbfc 	bl	80065c0 <__errno>
 8005dc8:	2613      	movs	r6, #19
 8005dca:	4605      	mov	r5, r0
 8005dcc:	2700      	movs	r7, #0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	beab      	bkpt	0x00ab
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	602e      	str	r6, [r5, #0]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ddc <checkerror>:
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d101      	bne.n	8005de4 <checkerror+0x8>
 8005de0:	f7ff bfee 	b.w	8005dc0 <error>
 8005de4:	4770      	bx	lr

08005de6 <_swiread>:
 8005de6:	b530      	push	{r4, r5, lr}
 8005de8:	b085      	sub	sp, #20
 8005dea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005dee:	9203      	str	r2, [sp, #12]
 8005df0:	2406      	movs	r4, #6
 8005df2:	ad01      	add	r5, sp, #4
 8005df4:	4620      	mov	r0, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	beab      	bkpt	0x00ab
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff ffed 	bl	8005ddc <checkerror>
 8005e02:	b005      	add	sp, #20
 8005e04:	bd30      	pop	{r4, r5, pc}

08005e06 <_read>:
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	460e      	mov	r6, r1
 8005e0a:	4614      	mov	r4, r2
 8005e0c:	f7ff ffbe 	bl	8005d8c <findslot>
 8005e10:	4605      	mov	r5, r0
 8005e12:	b930      	cbnz	r0, 8005e22 <_read+0x1c>
 8005e14:	f000 fbd4 	bl	80065c0 <__errno>
 8005e18:	2309      	movs	r3, #9
 8005e1a:	6003      	str	r3, [r0, #0]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	bd70      	pop	{r4, r5, r6, pc}
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	4622      	mov	r2, r4
 8005e26:	4631      	mov	r1, r6
 8005e28:	f7ff ffdd 	bl	8005de6 <_swiread>
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	d0f5      	beq.n	8005e1c <_read+0x16>
 8005e30:	686b      	ldr	r3, [r5, #4]
 8005e32:	1a20      	subs	r0, r4, r0
 8005e34:	4403      	add	r3, r0
 8005e36:	606b      	str	r3, [r5, #4]
 8005e38:	e7f2      	b.n	8005e20 <_read+0x1a>

08005e3a <_swilseek>:
 8005e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4616      	mov	r6, r2
 8005e40:	f7ff ffa4 	bl	8005d8c <findslot>
 8005e44:	4605      	mov	r5, r0
 8005e46:	b940      	cbnz	r0, 8005e5a <_swilseek+0x20>
 8005e48:	f000 fbba 	bl	80065c0 <__errno>
 8005e4c:	2309      	movs	r3, #9
 8005e4e:	6003      	str	r3, [r0, #0]
 8005e50:	f04f 34ff 	mov.w	r4, #4294967295
 8005e54:	4620      	mov	r0, r4
 8005e56:	b003      	add	sp, #12
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5a:	2e02      	cmp	r6, #2
 8005e5c:	d903      	bls.n	8005e66 <_swilseek+0x2c>
 8005e5e:	f000 fbaf 	bl	80065c0 <__errno>
 8005e62:	2316      	movs	r3, #22
 8005e64:	e7f3      	b.n	8005e4e <_swilseek+0x14>
 8005e66:	2e01      	cmp	r6, #1
 8005e68:	d112      	bne.n	8005e90 <_swilseek+0x56>
 8005e6a:	6843      	ldr	r3, [r0, #4]
 8005e6c:	18e4      	adds	r4, r4, r3
 8005e6e:	d4f6      	bmi.n	8005e5e <_swilseek+0x24>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	260a      	movs	r6, #10
 8005e74:	e9cd 3400 	strd	r3, r4, [sp]
 8005e78:	466f      	mov	r7, sp
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	beab      	bkpt	0x00ab
 8005e80:	4606      	mov	r6, r0
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ffaa 	bl	8005ddc <checkerror>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	dbe1      	blt.n	8005e50 <_swilseek+0x16>
 8005e8c:	606c      	str	r4, [r5, #4]
 8005e8e:	e7e1      	b.n	8005e54 <_swilseek+0x1a>
 8005e90:	2e02      	cmp	r6, #2
 8005e92:	6803      	ldr	r3, [r0, #0]
 8005e94:	d1ec      	bne.n	8005e70 <_swilseek+0x36>
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	260c      	movs	r6, #12
 8005e9a:	466f      	mov	r7, sp
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	beab      	bkpt	0x00ab
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff ff99 	bl	8005ddc <checkerror>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d0d0      	beq.n	8005e50 <_swilseek+0x16>
 8005eae:	4404      	add	r4, r0
 8005eb0:	e7de      	b.n	8005e70 <_swilseek+0x36>

08005eb2 <_lseek>:
 8005eb2:	f7ff bfc2 	b.w	8005e3a <_swilseek>

08005eb6 <_swiwrite>:
 8005eb6:	b530      	push	{r4, r5, lr}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005ebe:	9203      	str	r2, [sp, #12]
 8005ec0:	2405      	movs	r4, #5
 8005ec2:	ad01      	add	r5, sp, #4
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	beab      	bkpt	0x00ab
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff ff85 	bl	8005ddc <checkerror>
 8005ed2:	b005      	add	sp, #20
 8005ed4:	bd30      	pop	{r4, r5, pc}

08005ed6 <_write>:
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	460e      	mov	r6, r1
 8005eda:	4615      	mov	r5, r2
 8005edc:	f7ff ff56 	bl	8005d8c <findslot>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	b930      	cbnz	r0, 8005ef2 <_write+0x1c>
 8005ee4:	f000 fb6c 	bl	80065c0 <__errno>
 8005ee8:	2309      	movs	r3, #9
 8005eea:	6003      	str	r3, [r0, #0]
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	462a      	mov	r2, r5
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	f7ff ffdd 	bl	8005eb6 <_swiwrite>
 8005efc:	1e03      	subs	r3, r0, #0
 8005efe:	dbf5      	blt.n	8005eec <_write+0x16>
 8005f00:	6862      	ldr	r2, [r4, #4]
 8005f02:	1ae8      	subs	r0, r5, r3
 8005f04:	4402      	add	r2, r0
 8005f06:	42ab      	cmp	r3, r5
 8005f08:	6062      	str	r2, [r4, #4]
 8005f0a:	d1f1      	bne.n	8005ef0 <_write+0x1a>
 8005f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f10:	2000      	movs	r0, #0
 8005f12:	f7ff bf55 	b.w	8005dc0 <error>

08005f16 <_swiclose>:
 8005f16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f18:	2402      	movs	r4, #2
 8005f1a:	9001      	str	r0, [sp, #4]
 8005f1c:	ad01      	add	r5, sp, #4
 8005f1e:	4620      	mov	r0, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	beab      	bkpt	0x00ab
 8005f24:	4604      	mov	r4, r0
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff58 	bl	8005ddc <checkerror>
 8005f2c:	b003      	add	sp, #12
 8005f2e:	bd30      	pop	{r4, r5, pc}

08005f30 <_close>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4605      	mov	r5, r0
 8005f34:	f7ff ff2a 	bl	8005d8c <findslot>
 8005f38:	4604      	mov	r4, r0
 8005f3a:	b930      	cbnz	r0, 8005f4a <_close+0x1a>
 8005f3c:	f000 fb40 	bl	80065c0 <__errno>
 8005f40:	2309      	movs	r3, #9
 8005f42:	6003      	str	r3, [r0, #0]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	3d01      	subs	r5, #1
 8005f4c:	2d01      	cmp	r5, #1
 8005f4e:	d809      	bhi.n	8005f64 <_close+0x34>
 8005f50:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <_close+0x40>)
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d104      	bne.n	8005f64 <_close+0x34>
 8005f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	2000      	movs	r0, #0
 8005f62:	e7f1      	b.n	8005f48 <_close+0x18>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	f7ff ffd6 	bl	8005f16 <_swiclose>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0f5      	beq.n	8005f5a <_close+0x2a>
 8005f6e:	e7eb      	b.n	8005f48 <_close+0x18>
 8005f70:	20025bc0 	.word	0x20025bc0

08005f74 <_swistat>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	f7ff ff08 	bl	8005d8c <findslot>
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	b930      	cbnz	r0, 8005f8e <_swistat+0x1a>
 8005f80:	f000 fb1e 	bl	80065c0 <__errno>
 8005f84:	2309      	movs	r3, #9
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f94:	6063      	str	r3, [r4, #4]
 8005f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f9a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005f9c:	260c      	movs	r6, #12
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	beab      	bkpt	0x00ab
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f7ff ff18 	bl	8005ddc <checkerror>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d0eb      	beq.n	8005f88 <_swistat+0x14>
 8005fb0:	6120      	str	r0, [r4, #16]
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e7ea      	b.n	8005f8c <_swistat+0x18>

08005fb6 <_stat>:
 8005fb6:	b538      	push	{r3, r4, r5, lr}
 8005fb8:	460d      	mov	r5, r1
 8005fba:	4604      	mov	r4, r0
 8005fbc:	2258      	movs	r2, #88	@ 0x58
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	f000 faae 	bl	8006522 <memset>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f000 f811 	bl	8005ff0 <_swiopen>
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	d00b      	beq.n	8005fec <_stat+0x36>
 8005fd4:	686b      	ldr	r3, [r5, #4]
 8005fd6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fda:	606b      	str	r3, [r5, #4]
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7ff ffc9 	bl	8005f74 <_swistat>
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f7ff ffa3 	bl	8005f30 <_close>
 8005fea:	462c      	mov	r4, r5
 8005fec:	4620      	mov	r0, r4
 8005fee:	bd38      	pop	{r3, r4, r5, pc}

08005ff0 <_swiopen>:
 8005ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff4:	4f29      	ldr	r7, [pc, #164]	@ (800609c <_swiopen+0xac>)
 8005ff6:	b096      	sub	sp, #88	@ 0x58
 8005ff8:	4682      	mov	sl, r0
 8005ffa:	460e      	mov	r6, r1
 8005ffc:	2400      	movs	r4, #0
 8005ffe:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8006002:	3301      	adds	r3, #1
 8006004:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006008:	d00c      	beq.n	8006024 <_swiopen+0x34>
 800600a:	3401      	adds	r4, #1
 800600c:	2c14      	cmp	r4, #20
 800600e:	d1f6      	bne.n	8005ffe <_swiopen+0xe>
 8006010:	f000 fad6 	bl	80065c0 <__errno>
 8006014:	2318      	movs	r3, #24
 8006016:	6003      	str	r3, [r0, #0]
 8006018:	f04f 34ff 	mov.w	r4, #4294967295
 800601c:	4620      	mov	r0, r4
 800601e:	b016      	add	sp, #88	@ 0x58
 8006020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006024:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006028:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800602c:	46e9      	mov	r9, sp
 800602e:	d109      	bne.n	8006044 <_swiopen+0x54>
 8006030:	4649      	mov	r1, r9
 8006032:	4650      	mov	r0, sl
 8006034:	f7ff ffbf 	bl	8005fb6 <_stat>
 8006038:	3001      	adds	r0, #1
 800603a:	d003      	beq.n	8006044 <_swiopen+0x54>
 800603c:	f000 fac0 	bl	80065c0 <__errno>
 8006040:	2311      	movs	r3, #17
 8006042:	e7e8      	b.n	8006016 <_swiopen+0x26>
 8006044:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006048:	f240 6301 	movw	r3, #1537	@ 0x601
 800604c:	07b2      	lsls	r2, r6, #30
 800604e:	bf48      	it	mi
 8006050:	f045 0502 	orrmi.w	r5, r5, #2
 8006054:	421e      	tst	r6, r3
 8006056:	bf18      	it	ne
 8006058:	f045 0504 	orrne.w	r5, r5, #4
 800605c:	0733      	lsls	r3, r6, #28
 800605e:	bf48      	it	mi
 8006060:	f025 0504 	bicmi.w	r5, r5, #4
 8006064:	4650      	mov	r0, sl
 8006066:	bf48      	it	mi
 8006068:	f045 0508 	orrmi.w	r5, r5, #8
 800606c:	f8cd a000 	str.w	sl, [sp]
 8006070:	f7fa f8bc 	bl	80001ec <strlen>
 8006074:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006078:	2501      	movs	r5, #1
 800607a:	4628      	mov	r0, r5
 800607c:	4649      	mov	r1, r9
 800607e:	beab      	bkpt	0x00ab
 8006080:	4605      	mov	r5, r0
 8006082:	2d00      	cmp	r5, #0
 8006084:	db05      	blt.n	8006092 <_swiopen+0xa2>
 8006086:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800608a:	4447      	add	r7, r8
 800608c:	2300      	movs	r3, #0
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e7c4      	b.n	800601c <_swiopen+0x2c>
 8006092:	4628      	mov	r0, r5
 8006094:	f7ff fe94 	bl	8005dc0 <error>
 8006098:	4604      	mov	r4, r0
 800609a:	e7bf      	b.n	800601c <_swiopen+0x2c>
 800609c:	20025bc0 	.word	0x20025bc0

080060a0 <_get_semihosting_exts>:
 80060a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	4829      	ldr	r0, [pc, #164]	@ (8006150 <_get_semihosting_exts+0xb0>)
 80060aa:	2100      	movs	r1, #0
 80060ac:	4615      	mov	r5, r2
 80060ae:	f7ff ff9f 	bl	8005ff0 <_swiopen>
 80060b2:	462a      	mov	r2, r5
 80060b4:	4604      	mov	r4, r0
 80060b6:	2100      	movs	r1, #0
 80060b8:	4630      	mov	r0, r6
 80060ba:	f000 fa32 	bl	8006522 <memset>
 80060be:	1c63      	adds	r3, r4, #1
 80060c0:	d014      	beq.n	80060ec <_get_semihosting_exts+0x4c>
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff fe62 	bl	8005d8c <findslot>
 80060c8:	f04f 080c 	mov.w	r8, #12
 80060cc:	4681      	mov	r9, r0
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	beab      	bkpt	0x00ab
 80060d4:	4680      	mov	r8, r0
 80060d6:	4640      	mov	r0, r8
 80060d8:	f7ff fe80 	bl	8005ddc <checkerror>
 80060dc:	2803      	cmp	r0, #3
 80060de:	dd02      	ble.n	80060e6 <_get_semihosting_exts+0x46>
 80060e0:	1ec3      	subs	r3, r0, #3
 80060e2:	42ab      	cmp	r3, r5
 80060e4:	dc07      	bgt.n	80060f6 <_get_semihosting_exts+0x56>
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff ff22 	bl	8005f30 <_close>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295
 80060f0:	b003      	add	sp, #12
 80060f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060f6:	2204      	movs	r2, #4
 80060f8:	eb0d 0102 	add.w	r1, sp, r2
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7ff fe82 	bl	8005e06 <_read>
 8006102:	2803      	cmp	r0, #3
 8006104:	ddef      	ble.n	80060e6 <_get_semihosting_exts+0x46>
 8006106:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800610a:	2b53      	cmp	r3, #83	@ 0x53
 800610c:	d1eb      	bne.n	80060e6 <_get_semihosting_exts+0x46>
 800610e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006112:	2b48      	cmp	r3, #72	@ 0x48
 8006114:	d1e7      	bne.n	80060e6 <_get_semihosting_exts+0x46>
 8006116:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800611a:	2b46      	cmp	r3, #70	@ 0x46
 800611c:	d1e3      	bne.n	80060e6 <_get_semihosting_exts+0x46>
 800611e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006122:	2b42      	cmp	r3, #66	@ 0x42
 8006124:	d1df      	bne.n	80060e6 <_get_semihosting_exts+0x46>
 8006126:	2201      	movs	r2, #1
 8006128:	4639      	mov	r1, r7
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff fe85 	bl	8005e3a <_swilseek>
 8006130:	2800      	cmp	r0, #0
 8006132:	dbd8      	blt.n	80060e6 <_get_semihosting_exts+0x46>
 8006134:	462a      	mov	r2, r5
 8006136:	4631      	mov	r1, r6
 8006138:	4620      	mov	r0, r4
 800613a:	f7ff fe64 	bl	8005e06 <_read>
 800613e:	4605      	mov	r5, r0
 8006140:	4620      	mov	r0, r4
 8006142:	f7ff fef5 	bl	8005f30 <_close>
 8006146:	4628      	mov	r0, r5
 8006148:	f7ff fe48 	bl	8005ddc <checkerror>
 800614c:	e7d0      	b.n	80060f0 <_get_semihosting_exts+0x50>
 800614e:	bf00      	nop
 8006150:	08007a50 	.word	0x08007a50

08006154 <initialise_semihosting_exts>:
 8006154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006156:	4d0a      	ldr	r5, [pc, #40]	@ (8006180 <initialise_semihosting_exts+0x2c>)
 8006158:	4c0a      	ldr	r4, [pc, #40]	@ (8006184 <initialise_semihosting_exts+0x30>)
 800615a:	2100      	movs	r1, #0
 800615c:	2201      	movs	r2, #1
 800615e:	a801      	add	r0, sp, #4
 8006160:	6029      	str	r1, [r5, #0]
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	f7ff ff9c 	bl	80060a0 <_get_semihosting_exts>
 8006168:	2800      	cmp	r0, #0
 800616a:	dd07      	ble.n	800617c <initialise_semihosting_exts+0x28>
 800616c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006170:	f003 0201 	and.w	r2, r3, #1
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	602a      	str	r2, [r5, #0]
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	b003      	add	sp, #12
 800617e:	bd30      	pop	{r4, r5, pc}
 8006180:	20000154 	.word	0x20000154
 8006184:	20000150 	.word	0x20000150

08006188 <_has_ext_stdout_stderr>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4c04      	ldr	r4, [pc, #16]	@ (800619c <_has_ext_stdout_stderr+0x14>)
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	da01      	bge.n	8006196 <_has_ext_stdout_stderr+0xe>
 8006192:	f7ff ffdf 	bl	8006154 <initialise_semihosting_exts>
 8006196:	6820      	ldr	r0, [r4, #0]
 8006198:	bd10      	pop	{r4, pc}
 800619a:	bf00      	nop
 800619c:	20000150 	.word	0x20000150

080061a0 <initialise_monitor_handles>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	b085      	sub	sp, #20
 80061a6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006258 <initialise_monitor_handles+0xb8>
 80061aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80061ae:	2303      	movs	r3, #3
 80061b0:	2400      	movs	r4, #0
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	af01      	add	r7, sp, #4
 80061b6:	9402      	str	r4, [sp, #8]
 80061b8:	2501      	movs	r5, #1
 80061ba:	4628      	mov	r0, r5
 80061bc:	4639      	mov	r1, r7
 80061be:	beab      	bkpt	0x00ab
 80061c0:	4605      	mov	r5, r0
 80061c2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800625c <initialise_monitor_handles+0xbc>
 80061c6:	4623      	mov	r3, r4
 80061c8:	4c20      	ldr	r4, [pc, #128]	@ (800624c <initialise_monitor_handles+0xac>)
 80061ca:	f8c8 5000 	str.w	r5, [r8]
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80061d6:	3301      	adds	r3, #1
 80061d8:	2b14      	cmp	r3, #20
 80061da:	d1fa      	bne.n	80061d2 <initialise_monitor_handles+0x32>
 80061dc:	f7ff ffd4 	bl	8006188 <_has_ext_stdout_stderr>
 80061e0:	4d1b      	ldr	r5, [pc, #108]	@ (8006250 <initialise_monitor_handles+0xb0>)
 80061e2:	b1d0      	cbz	r0, 800621a <initialise_monitor_handles+0x7a>
 80061e4:	f04f 0a03 	mov.w	sl, #3
 80061e8:	2304      	movs	r3, #4
 80061ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80061ee:	2601      	movs	r6, #1
 80061f0:	f8cd a00c 	str.w	sl, [sp, #12]
 80061f4:	9302      	str	r3, [sp, #8]
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	beab      	bkpt	0x00ab
 80061fc:	4683      	mov	fp, r0
 80061fe:	4b15      	ldr	r3, [pc, #84]	@ (8006254 <initialise_monitor_handles+0xb4>)
 8006200:	f8cd 9004 	str.w	r9, [sp, #4]
 8006204:	f8c3 b000 	str.w	fp, [r3]
 8006208:	2308      	movs	r3, #8
 800620a:	f8cd a00c 	str.w	sl, [sp, #12]
 800620e:	9302      	str	r3, [sp, #8]
 8006210:	4630      	mov	r0, r6
 8006212:	4639      	mov	r1, r7
 8006214:	beab      	bkpt	0x00ab
 8006216:	4606      	mov	r6, r0
 8006218:	602e      	str	r6, [r5, #0]
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	3301      	adds	r3, #1
 800621e:	bf02      	ittt	eq
 8006220:	4b0c      	ldreq	r3, [pc, #48]	@ (8006254 <initialise_monitor_handles+0xb4>)
 8006222:	681b      	ldreq	r3, [r3, #0]
 8006224:	602b      	streq	r3, [r5, #0]
 8006226:	2600      	movs	r6, #0
 8006228:	f8d8 3000 	ldr.w	r3, [r8]
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	6066      	str	r6, [r4, #4]
 8006230:	f7ff ffaa 	bl	8006188 <_has_ext_stdout_stderr>
 8006234:	b130      	cbz	r0, 8006244 <initialise_monitor_handles+0xa4>
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <initialise_monitor_handles+0xb4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800623e:	682b      	ldr	r3, [r5, #0]
 8006240:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006244:	b005      	add	sp, #20
 8006246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624a:	bf00      	nop
 800624c:	20025bc0 	.word	0x20025bc0
 8006250:	20025bb4 	.word	0x20025bb4
 8006254:	20025bb8 	.word	0x20025bb8
 8006258:	08007a66 	.word	0x08007a66
 800625c:	20025bbc 	.word	0x20025bbc

08006260 <__itoa>:
 8006260:	1e93      	subs	r3, r2, #2
 8006262:	2b22      	cmp	r3, #34	@ 0x22
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	d904      	bls.n	8006274 <__itoa+0x14>
 800626a:	2300      	movs	r3, #0
 800626c:	700b      	strb	r3, [r1, #0]
 800626e:	461c      	mov	r4, r3
 8006270:	4620      	mov	r0, r4
 8006272:	bd10      	pop	{r4, pc}
 8006274:	2a0a      	cmp	r2, #10
 8006276:	d109      	bne.n	800628c <__itoa+0x2c>
 8006278:	2800      	cmp	r0, #0
 800627a:	da07      	bge.n	800628c <__itoa+0x2c>
 800627c:	232d      	movs	r3, #45	@ 0x2d
 800627e:	700b      	strb	r3, [r1, #0]
 8006280:	4240      	negs	r0, r0
 8006282:	2101      	movs	r1, #1
 8006284:	4421      	add	r1, r4
 8006286:	f000 f805 	bl	8006294 <__utoa>
 800628a:	e7f1      	b.n	8006270 <__itoa+0x10>
 800628c:	2100      	movs	r1, #0
 800628e:	e7f9      	b.n	8006284 <__itoa+0x24>

08006290 <itoa>:
 8006290:	f7ff bfe6 	b.w	8006260 <__itoa>

08006294 <__utoa>:
 8006294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006296:	4c1f      	ldr	r4, [pc, #124]	@ (8006314 <__utoa+0x80>)
 8006298:	b08b      	sub	sp, #44	@ 0x2c
 800629a:	4605      	mov	r5, r0
 800629c:	460b      	mov	r3, r1
 800629e:	466e      	mov	r6, sp
 80062a0:	f104 0c20 	add.w	ip, r4, #32
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	6861      	ldr	r1, [r4, #4]
 80062a8:	4637      	mov	r7, r6
 80062aa:	c703      	stmia	r7!, {r0, r1}
 80062ac:	3408      	adds	r4, #8
 80062ae:	4564      	cmp	r4, ip
 80062b0:	463e      	mov	r6, r7
 80062b2:	d1f7      	bne.n	80062a4 <__utoa+0x10>
 80062b4:	7921      	ldrb	r1, [r4, #4]
 80062b6:	7139      	strb	r1, [r7, #4]
 80062b8:	1e91      	subs	r1, r2, #2
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	6038      	str	r0, [r7, #0]
 80062be:	2922      	cmp	r1, #34	@ 0x22
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	d904      	bls.n	80062d0 <__utoa+0x3c>
 80062c6:	7019      	strb	r1, [r3, #0]
 80062c8:	460b      	mov	r3, r1
 80062ca:	4618      	mov	r0, r3
 80062cc:	b00b      	add	sp, #44	@ 0x2c
 80062ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d0:	1e58      	subs	r0, r3, #1
 80062d2:	4684      	mov	ip, r0
 80062d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80062d8:	fb02 5617 	mls	r6, r2, r7, r5
 80062dc:	3628      	adds	r6, #40	@ 0x28
 80062de:	446e      	add	r6, sp
 80062e0:	460c      	mov	r4, r1
 80062e2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80062e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80062ea:	462e      	mov	r6, r5
 80062ec:	42b2      	cmp	r2, r6
 80062ee:	f101 0101 	add.w	r1, r1, #1
 80062f2:	463d      	mov	r5, r7
 80062f4:	d9ee      	bls.n	80062d4 <__utoa+0x40>
 80062f6:	2200      	movs	r2, #0
 80062f8:	545a      	strb	r2, [r3, r1]
 80062fa:	1919      	adds	r1, r3, r4
 80062fc:	1aa5      	subs	r5, r4, r2
 80062fe:	42aa      	cmp	r2, r5
 8006300:	dae3      	bge.n	80062ca <__utoa+0x36>
 8006302:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006306:	780e      	ldrb	r6, [r1, #0]
 8006308:	7006      	strb	r6, [r0, #0]
 800630a:	3201      	adds	r2, #1
 800630c:	f801 5901 	strb.w	r5, [r1], #-1
 8006310:	e7f4      	b.n	80062fc <__utoa+0x68>
 8006312:	bf00      	nop
 8006314:	08007a6a 	.word	0x08007a6a

08006318 <std>:
 8006318:	2300      	movs	r3, #0
 800631a:	b510      	push	{r4, lr}
 800631c:	4604      	mov	r4, r0
 800631e:	e9c0 3300 	strd	r3, r3, [r0]
 8006322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006326:	6083      	str	r3, [r0, #8]
 8006328:	8181      	strh	r1, [r0, #12]
 800632a:	6643      	str	r3, [r0, #100]	@ 0x64
 800632c:	81c2      	strh	r2, [r0, #14]
 800632e:	6183      	str	r3, [r0, #24]
 8006330:	4619      	mov	r1, r3
 8006332:	2208      	movs	r2, #8
 8006334:	305c      	adds	r0, #92	@ 0x5c
 8006336:	f000 f8f4 	bl	8006522 <memset>
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <std+0x58>)
 800633c:	6263      	str	r3, [r4, #36]	@ 0x24
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <std+0x5c>)
 8006340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <std+0x60>)
 8006344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <std+0x64>)
 8006348:	6323      	str	r3, [r4, #48]	@ 0x30
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <std+0x68>)
 800634c:	6224      	str	r4, [r4, #32]
 800634e:	429c      	cmp	r4, r3
 8006350:	d006      	beq.n	8006360 <std+0x48>
 8006352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006356:	4294      	cmp	r4, r2
 8006358:	d002      	beq.n	8006360 <std+0x48>
 800635a:	33d0      	adds	r3, #208	@ 0xd0
 800635c:	429c      	cmp	r4, r3
 800635e:	d105      	bne.n	800636c <std+0x54>
 8006360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006368:	f000 b954 	b.w	8006614 <__retarget_lock_init_recursive>
 800636c:	bd10      	pop	{r4, pc}
 800636e:	bf00      	nop
 8006370:	0800649d 	.word	0x0800649d
 8006374:	080064bf 	.word	0x080064bf
 8006378:	080064f7 	.word	0x080064f7
 800637c:	0800651b 	.word	0x0800651b
 8006380:	20025c60 	.word	0x20025c60

08006384 <stdio_exit_handler>:
 8006384:	4a02      	ldr	r2, [pc, #8]	@ (8006390 <stdio_exit_handler+0xc>)
 8006386:	4903      	ldr	r1, [pc, #12]	@ (8006394 <stdio_exit_handler+0x10>)
 8006388:	4803      	ldr	r0, [pc, #12]	@ (8006398 <stdio_exit_handler+0x14>)
 800638a:	f000 b869 	b.w	8006460 <_fwalk_sglue>
 800638e:	bf00      	nop
 8006390:	20000158 	.word	0x20000158
 8006394:	080067d1 	.word	0x080067d1
 8006398:	20000168 	.word	0x20000168

0800639c <cleanup_stdio>:
 800639c:	6841      	ldr	r1, [r0, #4]
 800639e:	4b0c      	ldr	r3, [pc, #48]	@ (80063d0 <cleanup_stdio+0x34>)
 80063a0:	4299      	cmp	r1, r3
 80063a2:	b510      	push	{r4, lr}
 80063a4:	4604      	mov	r4, r0
 80063a6:	d001      	beq.n	80063ac <cleanup_stdio+0x10>
 80063a8:	f000 fa12 	bl	80067d0 <_fflush_r>
 80063ac:	68a1      	ldr	r1, [r4, #8]
 80063ae:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <cleanup_stdio+0x38>)
 80063b0:	4299      	cmp	r1, r3
 80063b2:	d002      	beq.n	80063ba <cleanup_stdio+0x1e>
 80063b4:	4620      	mov	r0, r4
 80063b6:	f000 fa0b 	bl	80067d0 <_fflush_r>
 80063ba:	68e1      	ldr	r1, [r4, #12]
 80063bc:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <cleanup_stdio+0x3c>)
 80063be:	4299      	cmp	r1, r3
 80063c0:	d004      	beq.n	80063cc <cleanup_stdio+0x30>
 80063c2:	4620      	mov	r0, r4
 80063c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c8:	f000 ba02 	b.w	80067d0 <_fflush_r>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	bf00      	nop
 80063d0:	20025c60 	.word	0x20025c60
 80063d4:	20025cc8 	.word	0x20025cc8
 80063d8:	20025d30 	.word	0x20025d30

080063dc <global_stdio_init.part.0>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	4b0b      	ldr	r3, [pc, #44]	@ (800640c <global_stdio_init.part.0+0x30>)
 80063e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006410 <global_stdio_init.part.0+0x34>)
 80063e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006414 <global_stdio_init.part.0+0x38>)
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	4620      	mov	r0, r4
 80063e8:	2200      	movs	r2, #0
 80063ea:	2104      	movs	r1, #4
 80063ec:	f7ff ff94 	bl	8006318 <std>
 80063f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063f4:	2201      	movs	r2, #1
 80063f6:	2109      	movs	r1, #9
 80063f8:	f7ff ff8e 	bl	8006318 <std>
 80063fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006400:	2202      	movs	r2, #2
 8006402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006406:	2112      	movs	r1, #18
 8006408:	f7ff bf86 	b.w	8006318 <std>
 800640c:	20025d98 	.word	0x20025d98
 8006410:	20025c60 	.word	0x20025c60
 8006414:	08006385 	.word	0x08006385

08006418 <__sfp_lock_acquire>:
 8006418:	4801      	ldr	r0, [pc, #4]	@ (8006420 <__sfp_lock_acquire+0x8>)
 800641a:	f000 b8fc 	b.w	8006616 <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	20025da1 	.word	0x20025da1

08006424 <__sfp_lock_release>:
 8006424:	4801      	ldr	r0, [pc, #4]	@ (800642c <__sfp_lock_release+0x8>)
 8006426:	f000 b8f7 	b.w	8006618 <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	20025da1 	.word	0x20025da1

08006430 <__sinit>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4604      	mov	r4, r0
 8006434:	f7ff fff0 	bl	8006418 <__sfp_lock_acquire>
 8006438:	6a23      	ldr	r3, [r4, #32]
 800643a:	b11b      	cbz	r3, 8006444 <__sinit+0x14>
 800643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006440:	f7ff bff0 	b.w	8006424 <__sfp_lock_release>
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <__sinit+0x28>)
 8006446:	6223      	str	r3, [r4, #32]
 8006448:	4b04      	ldr	r3, [pc, #16]	@ (800645c <__sinit+0x2c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f5      	bne.n	800643c <__sinit+0xc>
 8006450:	f7ff ffc4 	bl	80063dc <global_stdio_init.part.0>
 8006454:	e7f2      	b.n	800643c <__sinit+0xc>
 8006456:	bf00      	nop
 8006458:	0800639d 	.word	0x0800639d
 800645c:	20025d98 	.word	0x20025d98

08006460 <_fwalk_sglue>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4607      	mov	r7, r0
 8006466:	4688      	mov	r8, r1
 8006468:	4614      	mov	r4, r2
 800646a:	2600      	movs	r6, #0
 800646c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006470:	f1b9 0901 	subs.w	r9, r9, #1
 8006474:	d505      	bpl.n	8006482 <_fwalk_sglue+0x22>
 8006476:	6824      	ldr	r4, [r4, #0]
 8006478:	2c00      	cmp	r4, #0
 800647a:	d1f7      	bne.n	800646c <_fwalk_sglue+0xc>
 800647c:	4630      	mov	r0, r6
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d907      	bls.n	8006498 <_fwalk_sglue+0x38>
 8006488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800648c:	3301      	adds	r3, #1
 800648e:	d003      	beq.n	8006498 <_fwalk_sglue+0x38>
 8006490:	4629      	mov	r1, r5
 8006492:	4638      	mov	r0, r7
 8006494:	47c0      	blx	r8
 8006496:	4306      	orrs	r6, r0
 8006498:	3568      	adds	r5, #104	@ 0x68
 800649a:	e7e9      	b.n	8006470 <_fwalk_sglue+0x10>

0800649c <__sread>:
 800649c:	b510      	push	{r4, lr}
 800649e:	460c      	mov	r4, r1
 80064a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a4:	f000 f868 	bl	8006578 <_read_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	bfab      	itete	ge
 80064ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064ae:	89a3      	ldrhlt	r3, [r4, #12]
 80064b0:	181b      	addge	r3, r3, r0
 80064b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064b6:	bfac      	ite	ge
 80064b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064ba:	81a3      	strhlt	r3, [r4, #12]
 80064bc:	bd10      	pop	{r4, pc}

080064be <__swrite>:
 80064be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	461f      	mov	r7, r3
 80064c4:	898b      	ldrh	r3, [r1, #12]
 80064c6:	05db      	lsls	r3, r3, #23
 80064c8:	4605      	mov	r5, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	4616      	mov	r6, r2
 80064ce:	d505      	bpl.n	80064dc <__swrite+0x1e>
 80064d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d4:	2302      	movs	r3, #2
 80064d6:	2200      	movs	r2, #0
 80064d8:	f000 f83c 	bl	8006554 <_lseek_r>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	4632      	mov	r2, r6
 80064ea:	463b      	mov	r3, r7
 80064ec:	4628      	mov	r0, r5
 80064ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f2:	f000 b853 	b.w	800659c <_write_r>

080064f6 <__sseek>:
 80064f6:	b510      	push	{r4, lr}
 80064f8:	460c      	mov	r4, r1
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 f829 	bl	8006554 <_lseek_r>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	bf15      	itete	ne
 8006508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800650a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800650e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006512:	81a3      	strheq	r3, [r4, #12]
 8006514:	bf18      	it	ne
 8006516:	81a3      	strhne	r3, [r4, #12]
 8006518:	bd10      	pop	{r4, pc}

0800651a <__sclose>:
 800651a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651e:	f000 b809 	b.w	8006534 <_close_r>

08006522 <memset>:
 8006522:	4402      	add	r2, r0
 8006524:	4603      	mov	r3, r0
 8006526:	4293      	cmp	r3, r2
 8006528:	d100      	bne.n	800652c <memset+0xa>
 800652a:	4770      	bx	lr
 800652c:	f803 1b01 	strb.w	r1, [r3], #1
 8006530:	e7f9      	b.n	8006526 <memset+0x4>
	...

08006534 <_close_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_close_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7ff fcf6 	bl	8005f30 <_close>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_close_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_close_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20025d9c 	.word	0x20025d9c

08006554 <_lseek_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_lseek_r+0x20>)
 8006558:	4604      	mov	r4, r0
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7ff fca5 	bl	8005eb2 <_lseek>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_lseek_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_lseek_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20025d9c 	.word	0x20025d9c

08006578 <_read_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d07      	ldr	r5, [pc, #28]	@ (8006598 <_read_r+0x20>)
 800657c:	4604      	mov	r4, r0
 800657e:	4608      	mov	r0, r1
 8006580:	4611      	mov	r1, r2
 8006582:	2200      	movs	r2, #0
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	f7ff fc3d 	bl	8005e06 <_read>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_read_r+0x1e>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_read_r+0x1e>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20025d9c 	.word	0x20025d9c

0800659c <_write_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	@ (80065bc <_write_r+0x20>)
 80065a0:	4604      	mov	r4, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7ff fc93 	bl	8005ed6 <_write>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_write_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_write_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20025d9c 	.word	0x20025d9c

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	@ (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000164 	.word	0x20000164

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	@ (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	@ (8006610 <__libc_init_array+0x44>)
 80065e0:	f000 f91e 	bl	8006820 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08007a98 	.word	0x08007a98
 8006608:	08007a98 	.word	0x08007a98
 800660c:	08007a98 	.word	0x08007a98
 8006610:	08007a9c 	.word	0x08007a9c

08006614 <__retarget_lock_init_recursive>:
 8006614:	4770      	bx	lr

08006616 <__retarget_lock_acquire_recursive>:
 8006616:	4770      	bx	lr

08006618 <__retarget_lock_release_recursive>:
 8006618:	4770      	bx	lr
	...

0800661c <_free_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	4605      	mov	r5, r0
 8006620:	2900      	cmp	r1, #0
 8006622:	d041      	beq.n	80066a8 <_free_r+0x8c>
 8006624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006628:	1f0c      	subs	r4, r1, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfb8      	it	lt
 800662e:	18e4      	addlt	r4, r4, r3
 8006630:	f000 f83e 	bl	80066b0 <__malloc_lock>
 8006634:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <_free_r+0x90>)
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	b933      	cbnz	r3, 8006648 <_free_r+0x2c>
 800663a:	6063      	str	r3, [r4, #4]
 800663c:	6014      	str	r4, [r2, #0]
 800663e:	4628      	mov	r0, r5
 8006640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006644:	f000 b83a 	b.w	80066bc <__malloc_unlock>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d908      	bls.n	800665e <_free_r+0x42>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	1821      	adds	r1, r4, r0
 8006650:	428b      	cmp	r3, r1
 8006652:	bf01      	itttt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	1809      	addeq	r1, r1, r0
 800665a:	6021      	streq	r1, [r4, #0]
 800665c:	e7ed      	b.n	800663a <_free_r+0x1e>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x4c>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x42>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1850      	adds	r0, r2, r1
 800666c:	42a0      	cmp	r0, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x6c>
 8006670:	6820      	ldr	r0, [r4, #0]
 8006672:	4401      	add	r1, r0
 8006674:	1850      	adds	r0, r2, r1
 8006676:	4283      	cmp	r3, r0
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1e0      	bne.n	800663e <_free_r+0x22>
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4408      	add	r0, r1
 8006684:	6010      	str	r0, [r2, #0]
 8006686:	e7da      	b.n	800663e <_free_r+0x22>
 8006688:	d902      	bls.n	8006690 <_free_r+0x74>
 800668a:	230c      	movs	r3, #12
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	e7d6      	b.n	800663e <_free_r+0x22>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	1821      	adds	r1, r4, r0
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1809      	addeq	r1, r1, r0
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7ca      	b.n	800663e <_free_r+0x22>
 80066a8:	bd38      	pop	{r3, r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	20025da4 	.word	0x20025da4

080066b0 <__malloc_lock>:
 80066b0:	4801      	ldr	r0, [pc, #4]	@ (80066b8 <__malloc_lock+0x8>)
 80066b2:	f7ff bfb0 	b.w	8006616 <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	20025da0 	.word	0x20025da0

080066bc <__malloc_unlock>:
 80066bc:	4801      	ldr	r0, [pc, #4]	@ (80066c4 <__malloc_unlock+0x8>)
 80066be:	f7ff bfab 	b.w	8006618 <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	20025da0 	.word	0x20025da0

080066c8 <__sflush_r>:
 80066c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d0:	0716      	lsls	r6, r2, #28
 80066d2:	4605      	mov	r5, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	d454      	bmi.n	8006782 <__sflush_r+0xba>
 80066d8:	684b      	ldr	r3, [r1, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dc02      	bgt.n	80066e4 <__sflush_r+0x1c>
 80066de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dd48      	ble.n	8006776 <__sflush_r+0xae>
 80066e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066e6:	2e00      	cmp	r6, #0
 80066e8:	d045      	beq.n	8006776 <__sflush_r+0xae>
 80066ea:	2300      	movs	r3, #0
 80066ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066f0:	682f      	ldr	r7, [r5, #0]
 80066f2:	6a21      	ldr	r1, [r4, #32]
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	d030      	beq.n	800675a <__sflush_r+0x92>
 80066f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	0759      	lsls	r1, r3, #29
 80066fe:	d505      	bpl.n	800670c <__sflush_r+0x44>
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006706:	b10b      	cbz	r3, 800670c <__sflush_r+0x44>
 8006708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	2300      	movs	r3, #0
 800670e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006710:	6a21      	ldr	r1, [r4, #32]
 8006712:	4628      	mov	r0, r5
 8006714:	47b0      	blx	r6
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	d106      	bne.n	800672a <__sflush_r+0x62>
 800671c:	6829      	ldr	r1, [r5, #0]
 800671e:	291d      	cmp	r1, #29
 8006720:	d82b      	bhi.n	800677a <__sflush_r+0xb2>
 8006722:	4a2a      	ldr	r2, [pc, #168]	@ (80067cc <__sflush_r+0x104>)
 8006724:	410a      	asrs	r2, r1
 8006726:	07d6      	lsls	r6, r2, #31
 8006728:	d427      	bmi.n	800677a <__sflush_r+0xb2>
 800672a:	2200      	movs	r2, #0
 800672c:	6062      	str	r2, [r4, #4]
 800672e:	04d9      	lsls	r1, r3, #19
 8006730:	6922      	ldr	r2, [r4, #16]
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	d504      	bpl.n	8006740 <__sflush_r+0x78>
 8006736:	1c42      	adds	r2, r0, #1
 8006738:	d101      	bne.n	800673e <__sflush_r+0x76>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	b903      	cbnz	r3, 8006740 <__sflush_r+0x78>
 800673e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006742:	602f      	str	r7, [r5, #0]
 8006744:	b1b9      	cbz	r1, 8006776 <__sflush_r+0xae>
 8006746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800674a:	4299      	cmp	r1, r3
 800674c:	d002      	beq.n	8006754 <__sflush_r+0x8c>
 800674e:	4628      	mov	r0, r5
 8006750:	f7ff ff64 	bl	800661c <_free_r>
 8006754:	2300      	movs	r3, #0
 8006756:	6363      	str	r3, [r4, #52]	@ 0x34
 8006758:	e00d      	b.n	8006776 <__sflush_r+0xae>
 800675a:	2301      	movs	r3, #1
 800675c:	4628      	mov	r0, r5
 800675e:	47b0      	blx	r6
 8006760:	4602      	mov	r2, r0
 8006762:	1c50      	adds	r0, r2, #1
 8006764:	d1c9      	bne.n	80066fa <__sflush_r+0x32>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0c6      	beq.n	80066fa <__sflush_r+0x32>
 800676c:	2b1d      	cmp	r3, #29
 800676e:	d001      	beq.n	8006774 <__sflush_r+0xac>
 8006770:	2b16      	cmp	r3, #22
 8006772:	d11e      	bne.n	80067b2 <__sflush_r+0xea>
 8006774:	602f      	str	r7, [r5, #0]
 8006776:	2000      	movs	r0, #0
 8006778:	e022      	b.n	80067c0 <__sflush_r+0xf8>
 800677a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677e:	b21b      	sxth	r3, r3
 8006780:	e01b      	b.n	80067ba <__sflush_r+0xf2>
 8006782:	690f      	ldr	r7, [r1, #16]
 8006784:	2f00      	cmp	r7, #0
 8006786:	d0f6      	beq.n	8006776 <__sflush_r+0xae>
 8006788:	0793      	lsls	r3, r2, #30
 800678a:	680e      	ldr	r6, [r1, #0]
 800678c:	bf08      	it	eq
 800678e:	694b      	ldreq	r3, [r1, #20]
 8006790:	600f      	str	r7, [r1, #0]
 8006792:	bf18      	it	ne
 8006794:	2300      	movne	r3, #0
 8006796:	eba6 0807 	sub.w	r8, r6, r7
 800679a:	608b      	str	r3, [r1, #8]
 800679c:	f1b8 0f00 	cmp.w	r8, #0
 80067a0:	dde9      	ble.n	8006776 <__sflush_r+0xae>
 80067a2:	6a21      	ldr	r1, [r4, #32]
 80067a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067a6:	4643      	mov	r3, r8
 80067a8:	463a      	mov	r2, r7
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b0      	blx	r6
 80067ae:	2800      	cmp	r0, #0
 80067b0:	dc08      	bgt.n	80067c4 <__sflush_r+0xfc>
 80067b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	4407      	add	r7, r0
 80067c6:	eba8 0800 	sub.w	r8, r8, r0
 80067ca:	e7e7      	b.n	800679c <__sflush_r+0xd4>
 80067cc:	dfbffffe 	.word	0xdfbffffe

080067d0 <_fflush_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	690b      	ldr	r3, [r1, #16]
 80067d4:	4605      	mov	r5, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	b913      	cbnz	r3, 80067e0 <_fflush_r+0x10>
 80067da:	2500      	movs	r5, #0
 80067dc:	4628      	mov	r0, r5
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	b118      	cbz	r0, 80067ea <_fflush_r+0x1a>
 80067e2:	6a03      	ldr	r3, [r0, #32]
 80067e4:	b90b      	cbnz	r3, 80067ea <_fflush_r+0x1a>
 80067e6:	f7ff fe23 	bl	8006430 <__sinit>
 80067ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f3      	beq.n	80067da <_fflush_r+0xa>
 80067f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067f4:	07d0      	lsls	r0, r2, #31
 80067f6:	d404      	bmi.n	8006802 <_fflush_r+0x32>
 80067f8:	0599      	lsls	r1, r3, #22
 80067fa:	d402      	bmi.n	8006802 <_fflush_r+0x32>
 80067fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067fe:	f7ff ff0a 	bl	8006616 <__retarget_lock_acquire_recursive>
 8006802:	4628      	mov	r0, r5
 8006804:	4621      	mov	r1, r4
 8006806:	f7ff ff5f 	bl	80066c8 <__sflush_r>
 800680a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800680c:	07da      	lsls	r2, r3, #31
 800680e:	4605      	mov	r5, r0
 8006810:	d4e4      	bmi.n	80067dc <_fflush_r+0xc>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	059b      	lsls	r3, r3, #22
 8006816:	d4e1      	bmi.n	80067dc <_fflush_r+0xc>
 8006818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800681a:	f7ff fefd 	bl	8006618 <__retarget_lock_release_recursive>
 800681e:	e7dd      	b.n	80067dc <_fflush_r+0xc>

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
